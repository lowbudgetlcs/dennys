openapi: 3.0.3
info:
  title: Dennys - OpenAPI 3.0
  description: |-
    This is the Dennys OpenAPI 3.0 specification.
  contact:
    email: lblcs.dev@gmail.com
  license:
    name: GPL-3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html#license-text
  version: 1.0.0
externalDocs:
  description: Find out more about Dennys
  url: https://github.com/lowbudgetlcs/dennys
servers:
  - url: http://localhost:9292

tags:
  - name: v1/event
    description: Access to LBLCS events
  - name: v1/player
    description: Manage Players
  - name: v1/team
    description: Manage Teams

paths:
  /api/v1/event:
    get:
      tags:
        - v1/event
      summary: Get all events
      description: Fetch a list of all events.
      operationId: getEvents
      parameters:
        - name: eventGroup
          in: query
          description: Filter by this event group
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventDto'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - v1/event
      summary: Create a new event.
      description: Registers an event with Dennys.
      operationId: addEvent
      requestBody:
        description: Event specification
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventDto'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDto'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/event/{eventId}:
    get:
      tags:
        - v1/event
      summary: Find event by ID.
      description: Returns a single event.
      operationId: getEventById
      parameters:
        - name: eventId
          in: path
          description: ID of event to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDto'
        '400':
          description: Missing or malformed id
        '404':
          description: Event not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      tags:
        - v1/event
      summary: Update an event.
      parameters:
        - name: eventId
          in: path
          description: ID of event to update
          required: true
          schema:
            type: integer
            format: int64
      operationId: updateEvent
      requestBody:
        required: true
        description: Update existing event.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDto'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/player:
    get:
      summary: Get all players (optionally filter by team)
      operationId: getPlayers
      tags:
        - v1/player
      parameters:
        - name: teamId
          in: query
          description: |
            Optional team filter:
              - Not provided: return **all players**
              - integer value: return players **on that team**
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: List of matching players
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerDto'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new player
      operationId: addPlayer
      tags:
        - v1/player
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPlayerDto'
      responses:
        '200':
          description: Player created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerDto'

  /api/v1/player/{playerId}:
    get:
      summary: Get player by ID
      operationId: getPlayerById
      tags:
        - v1/player
      parameters:
        - name: playerId
          in: path
          required: true
          description: ID of the player to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Player found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerDto'
        '404':
          description: Player not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Rename a player
      operationId: renamePlayer
      tags:
        - v1/player
      parameters:
        - name: playerId
          in: path
          required: true
          description: ID of the player to rename
          schema:
            type: integer
      requestBody:
        required: true
        description: New name for the player
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenamePlayerDto'
      responses:
        '200':
          description: Player renamed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerDto'
        '400':
          description: Invalid name
        '404':
          description: Player not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/team:
    get:
      summary: Get all teams (optionally filter by event)
      operationId: getTeams
      tags:
        - v1/team
      parameters:
        - name: eventId
          in: query
          required: false
          description: |
            Optional event filter:
              - Not provided: return **all teams**
              - integer value: return teams **in that event**
          schema:
            type: integer
      responses:
        '200':
          description: List of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamWithPlayersDto'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new team
      operationId: addTeam
      tags:
        - v1/team
      requestBody:
        required: true
        description: New team details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTeamDto'
      responses:
        '200':
          description: Team created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '400':
          description: Invalid input
        '422':
          description: Validation exception

  /api/v1/team/{teamId}:
    get:
      summary: Get a team by ID
      operationId: getTeamById
      tags:
        - v1/team
      parameters:
        - name: teamId
          in: path
          required: true
          description: ID of the team
          schema:
            type: integer
      responses:
        '200':
          description: Team found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamWithPlayersDto'
        '404':
          description: Team not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a team (not including player management)
      operationId: updateTeam
      tags:
        - v1/team
      parameters:
        - name: teamId
          in: path
          required: true
          description: ID of the team to update
          schema:
            type: integer
      requestBody:
        required: true
        description: Fields to update for the team
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTeamDto'
      responses:
        '200':
          description: Team updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '400':
          description: Invalid input
        '404':
          description: Team not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/team/{teamId}/players:
    post:
      summary: Add a player to a team
      operationId: addPlayerToTeam
      tags:
        - v1/team
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - playerId
              properties:
                playerId:
                  type: integer
      responses:
        '200':
          description: Player added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamWithPlayersDto'
        '403':
          description: Player already assigned to a team in this event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Team or player not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/team/{teamId}/players/{playerId}:
    delete:
      summary: Remove a player from a team
      operationId: removePlayerFromTeam
      tags:
        - v1/team
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: playerId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Player removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamWithPlayersDto'
        '404':
          description: Team or player not found


components:
  schemas:
    EventStatus:
      type: string
      enum:
        - NOT_STARTED
        - ACTIVE
        - CANCELED
        - PAUSED
        - COMPLETED

    CreateEventDto:
      type: object
      required:
        - name
        - startDate
        - endDate
        - status
      properties:
        name:
          type: string
          example: Season 14 Commercial
        description:
          type: string
          description: Describe the event!
          example: Season 14's plat-emerald league!
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        eventGroup:
          type: integer
          description: An optional event grouping. Invalid IDs will not cause event creation failure.
        status:
          allOf:
            - description: The intended starting status of the event.
            - example: NOT_STARTED
            - $ref: '#/components/schemas/EventStatus'

    UpdateEventDto:
      type: object
      properties:
        name:
          type: string
          description: Event name
          example: Season 14 Commercial
        description:
          type: string
          example: Season 14's plat-emerald league!
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        eventGroupId:
          type: integer
        status:
          allOf:
            - description: The new event status.
            - example: CANCELED
            - $ref: '#/components/schemas/EventStatus'

    EventDto:
      type: object
      required:
        - id
        - name
        - description
        - createdAt
        - startDate
        - endDate
        - status
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          description: Event name
          example: Season 14 Commercial
        description:
          type: string
          example: Season 14's plat-emerald league!
        createdAt:
          type: string
          format: date-time
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        eventGroup:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
        status:
          allOf:
            - description: The current event status.
            - example: NOT_STARTED
            - $ref: '#/components/schemas/EventStatus'

    NewPlayerDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: ruuffian#FUNZ
        teamId:
          type: integer
          nullable: true


    RiotAccount:
      type: object
      required:
        - id
        - riotPuuid
      properties:
        id:
          type: integer
        riotPuuid:
          type: string
          description: Riot's permanent unique user ID (78 chars)
        playerId:
          type: integer
          nullable: true

    PlayerDto:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
        name:
          type: string
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/RiotAccount'

    RenamePlayerDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: New Riot-formatted player name (e.g. ruuffian#FUNZ)
          example: newname#ABCD

    NewTeamDto:
      type: object
      required:
        - name
        - eventId
      properties:
        name:
          type: string
          maxLength: 80
          example: Golden Guardians
        logoName:
          type: string
          nullable: true
          example: ggs.png
        eventId:
          type: integer
          description: ID of the associated event

    UpdateTeamDto:
      type: object
      properties:
        name:
          type: string
          maxLength: 80
          example: Golden Guardians Rebranded
        logoName:
          type: string
          nullable: true
          example: new-logo.png
        eventId:
          type: integer
          nullable: true
          description: Set to null to unassign

    TeamDto:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
        name:
          type: string
        logoName:
          type: string
          nullable: true
        eventId:
          type: integer
          nullable: true

    TeamWithPlayersDto:
      type: object
      required:
        - id
        - name
        - players
      properties:
        id:
          type: integer
        name:
          type: string
        logoName:
          type: string
          nullable: true
        eventId:
          type: integer
          nullable: true
        players:
          type: array
          items:
            $ref: '#/components/schemas/PlayerDto'

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
