/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage


import kotlin.collections.List

import org.jooq.Catalog
import org.jooq.Table
import org.jooq.impl.SchemaImpl
import org.jooq.storage.tables.EventAuditLog
import org.jooq.storage.tables.Events
import org.jooq.storage.tables.Games
import org.jooq.storage.tables.GamesResults
import org.jooq.storage.tables.Metadata
import org.jooq.storage.tables.PlayerAuditLogs
import org.jooq.storage.tables.PlayerChampSelects
import org.jooq.storage.tables.PlayerCombats
import org.jooq.storage.tables.PlayerFarming
import org.jooq.storage.tables.PlayerGameFacts
import org.jooq.storage.tables.PlayerInventories
import org.jooq.storage.tables.PlayerPings
import org.jooq.storage.tables.PlayerToTeams
import org.jooq.storage.tables.PlayerVision
import org.jooq.storage.tables.Players
import org.jooq.storage.tables.RiotAccountToPlayer
import org.jooq.storage.tables.RiotAccounts
import org.jooq.storage.tables.RiotAccountsAuditLogs
import org.jooq.storage.tables.Series
import org.jooq.storage.tables.SeriesParticipants
import org.jooq.storage.tables.SeriesResults
import org.jooq.storage.tables.TeamAuditLogs
import org.jooq.storage.tables.Teams


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Dennys : SchemaImpl("dennys", DefaultCatalog.DEFAULT_CATALOG) {
    public companion object {

        /**
         * The reference instance of <code>dennys</code>
         */
        val DENNYS: Dennys = Dennys()
    }

    /**
     * The table <code>dennys.event_audit_log</code>.
     */
    val EVENT_AUDIT_LOG: EventAuditLog get() = EventAuditLog.EVENT_AUDIT_LOG

    /**
     * The table <code>dennys.events</code>.
     */
    val EVENTS: Events get() = Events.EVENTS

    /**
     * The table <code>dennys.games</code>.
     */
    val GAMES: Games get() = Games.GAMES

    /**
     * The table <code>dennys.games_results</code>.
     */
    val GAMES_RESULTS: GamesResults get() = GamesResults.GAMES_RESULTS

    /**
     * The table <code>dennys.metadata</code>.
     */
    val METADATA: Metadata get() = Metadata.METADATA

    /**
     * The table <code>dennys.player_audit_logs</code>.
     */
    val PLAYER_AUDIT_LOGS: PlayerAuditLogs get() = PlayerAuditLogs.PLAYER_AUDIT_LOGS

    /**
     * The table <code>dennys.player_champ_selects</code>.
     */
    val PLAYER_CHAMP_SELECTS: PlayerChampSelects get() = PlayerChampSelects.PLAYER_CHAMP_SELECTS

    /**
     * The table <code>dennys.player_combats</code>.
     */
    val PLAYER_COMBATS: PlayerCombats get() = PlayerCombats.PLAYER_COMBATS

    /**
     * The table <code>dennys.player_farming</code>.
     */
    val PLAYER_FARMING: PlayerFarming get() = PlayerFarming.PLAYER_FARMING

    /**
     * The table <code>dennys.player_game_facts</code>.
     */
    val PLAYER_GAME_FACTS: PlayerGameFacts get() = PlayerGameFacts.PLAYER_GAME_FACTS

    /**
     * The table <code>dennys.player_inventories</code>.
     */
    val PLAYER_INVENTORIES: PlayerInventories get() = PlayerInventories.PLAYER_INVENTORIES

    /**
     * The table <code>dennys.player_pings</code>.
     */
    val PLAYER_PINGS: PlayerPings get() = PlayerPings.PLAYER_PINGS

    /**
     * The table <code>dennys.player_to_teams</code>.
     */
    val PLAYER_TO_TEAMS: PlayerToTeams get() = PlayerToTeams.PLAYER_TO_TEAMS

    /**
     * The table <code>dennys.player_vision</code>.
     */
    val PLAYER_VISION: PlayerVision get() = PlayerVision.PLAYER_VISION

    /**
     * The table <code>dennys.players</code>.
     */
    val PLAYERS: Players get() = Players.PLAYERS

    /**
     * The table <code>dennys.riot_account_to_player</code>.
     */
    val RIOT_ACCOUNT_TO_PLAYER: RiotAccountToPlayer get() = RiotAccountToPlayer.RIOT_ACCOUNT_TO_PLAYER

    /**
     * The table <code>dennys.riot_accounts</code>.
     */
    val RIOT_ACCOUNTS: RiotAccounts get() = RiotAccounts.RIOT_ACCOUNTS

    /**
     * The table <code>dennys.riot_accounts_audit_logs</code>.
     */
    val RIOT_ACCOUNTS_AUDIT_LOGS: RiotAccountsAuditLogs get() = RiotAccountsAuditLogs.RIOT_ACCOUNTS_AUDIT_LOGS

    /**
     * The table <code>dennys.series</code>.
     */
    val SERIES: Series get() = Series.SERIES

    /**
     * The table <code>dennys.series_participants</code>.
     */
    val SERIES_PARTICIPANTS: SeriesParticipants get() = SeriesParticipants.SERIES_PARTICIPANTS

    /**
     * The table <code>dennys.series_results</code>.
     */
    val SERIES_RESULTS: SeriesResults get() = SeriesResults.SERIES_RESULTS

    /**
     * The table <code>dennys.team_audit_logs</code>.
     */
    val TEAM_AUDIT_LOGS: TeamAuditLogs get() = TeamAuditLogs.TEAM_AUDIT_LOGS

    /**
     * The table <code>dennys.teams</code>.
     */
    val TEAMS: Teams get() = Teams.TEAMS

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getTables(): List<Table<*>> = listOf(
        EventAuditLog.EVENT_AUDIT_LOG,
        Events.EVENTS,
        Games.GAMES,
        GamesResults.GAMES_RESULTS,
        Metadata.METADATA,
        PlayerAuditLogs.PLAYER_AUDIT_LOGS,
        PlayerChampSelects.PLAYER_CHAMP_SELECTS,
        PlayerCombats.PLAYER_COMBATS,
        PlayerFarming.PLAYER_FARMING,
        PlayerGameFacts.PLAYER_GAME_FACTS,
        PlayerInventories.PLAYER_INVENTORIES,
        PlayerPings.PLAYER_PINGS,
        PlayerToTeams.PLAYER_TO_TEAMS,
        PlayerVision.PLAYER_VISION,
        Players.PLAYERS,
        RiotAccountToPlayer.RIOT_ACCOUNT_TO_PLAYER,
        RiotAccounts.RIOT_ACCOUNTS,
        RiotAccountsAuditLogs.RIOT_ACCOUNTS_AUDIT_LOGS,
        Series.SERIES,
        SeriesParticipants.SERIES_PARTICIPANTS,
        SeriesResults.SERIES_RESULTS,
        TeamAuditLogs.TEAM_AUDIT_LOGS,
        Teams.TEAMS
    )
}
