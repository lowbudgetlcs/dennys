/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables


import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row14
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.storage.Dennys
import org.jooq.storage.keys.PLAYER_CHAMP_SELECTS_PKEY
import org.jooq.storage.tables.records.PlayerChampSelectsRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerChampSelects(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, PlayerChampSelectsRecord>?,
    aliased: Table<PlayerChampSelectsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<PlayerChampSelectsRecord>(
    alias,
    Dennys.DENNYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>dennys.player_champ_selects</code>
         */
        val PLAYER_CHAMP_SELECTS: PlayerChampSelects = PlayerChampSelects()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PlayerChampSelectsRecord> = PlayerChampSelectsRecord::class.java

    /**
     * The column <code>dennys.player_champ_selects.id</code>.
     */
    val ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>dennys.player_champ_selects.champion_name</code>.
     */
    val CHAMPION_NAME: TableField<PlayerChampSelectsRecord, String?> = createField(DSL.name("champion_name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.champion_id</code>.
     */
    val CHAMPION_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("champion_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.summoner1_id</code>.
     */
    val SUMMONER1_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("summoner1_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.summoner2_id</code>.
     */
    val SUMMONER2_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("summoner2_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.keystone_rune_id</code>.
     */
    val KEYSTONE_RUNE_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("keystone_rune_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.primary_rune1_id</code>.
     */
    val PRIMARY_RUNE1_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("primary_rune1_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.primary_rune2_id</code>.
     */
    val PRIMARY_RUNE2_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("primary_rune2_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.primary_rune3_id</code>.
     */
    val PRIMARY_RUNE3_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("primary_rune3_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.secondary_rune1_id</code>.
     */
    val SECONDARY_RUNE1_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("secondary_rune1_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.secondary_rune2_id</code>.
     */
    val SECONDARY_RUNE2_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("secondary_rune2_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.statshard1_id</code>.
     */
    val STATSHARD1_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("statshard1_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.statshard2_id</code>.
     */
    val STATSHARD2_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("statshard2_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.statshard3_id</code>.
     */
    val STATSHARD3_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("statshard3_id"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<PlayerChampSelectsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<PlayerChampSelectsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>dennys.player_champ_selects</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>dennys.player_champ_selects</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>dennys.player_champ_selects</code> table reference
     */
    constructor(): this(DSL.name("player_champ_selects"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, PlayerChampSelectsRecord>): this(Internal.createPathAlias(child, key), child, key, PLAYER_CHAMP_SELECTS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Dennys.DENNYS
    override fun getIdentity(): Identity<PlayerChampSelectsRecord, Int?> = super.getIdentity() as Identity<PlayerChampSelectsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PlayerChampSelectsRecord> = PLAYER_CHAMP_SELECTS_PKEY
    override fun `as`(alias: String): PlayerChampSelects = PlayerChampSelects(DSL.name(alias), this)
    override fun `as`(alias: Name): PlayerChampSelects = PlayerChampSelects(alias, this)
    override fun `as`(alias: Table<*>): PlayerChampSelects = PlayerChampSelects(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PlayerChampSelects = PlayerChampSelects(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PlayerChampSelects = PlayerChampSelects(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PlayerChampSelects = PlayerChampSelects(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row14<Int?, String?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?> = super.fieldsRow() as Row14<Int?, String?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, String?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, String?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
