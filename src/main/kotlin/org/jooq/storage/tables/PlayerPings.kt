/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables


import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.storage.Dennys
import org.jooq.storage.keys.PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_PINGS_ID_FKEY
import org.jooq.storage.keys.PLAYER_PINGS_PKEY
import org.jooq.storage.tables.PlayerGameFacts.PlayerGameFactsPath
import org.jooq.storage.tables.records.PlayerPingsRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerPings(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PlayerPingsRecord>?,
    parentPath: InverseForeignKey<out Record, PlayerPingsRecord>?,
    aliased: Table<PlayerPingsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PlayerPingsRecord>(
    alias,
    Dennys.DENNYS,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>dennys.player_pings</code>
         */
        val PLAYER_PINGS: PlayerPings = PlayerPings()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PlayerPingsRecord> = PlayerPingsRecord::class.java

    /**
     * The column <code>dennys.player_pings.id</code>.
     */
    val ID: TableField<PlayerPingsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>dennys.player_pings.on_my_way_count</code>.
     */
    val ON_MY_WAY_COUNT: TableField<PlayerPingsRecord, Int?> = createField(DSL.name("on_my_way_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_pings.enemy_missing_count</code>.
     */
    val ENEMY_MISSING_COUNT: TableField<PlayerPingsRecord, Int?> = createField(DSL.name("enemy_missing_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_pings.assist_me_count</code>.
     */
    val ASSIST_ME_COUNT: TableField<PlayerPingsRecord, Int?> = createField(DSL.name("assist_me_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_pings.get_back_count</code>.
     */
    val GET_BACK_COUNT: TableField<PlayerPingsRecord, Int?> = createField(DSL.name("get_back_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_pings.enemy_vision_count</code>.
     */
    val ENEMY_VISION_COUNT: TableField<PlayerPingsRecord, Int?> = createField(DSL.name("enemy_vision_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_pings.all_in_count</code>.
     */
    val ALL_IN_COUNT: TableField<PlayerPingsRecord, Int?> = createField(DSL.name("all_in_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_pings.need_vision_count</code>.
     */
    val NEED_VISION_COUNT: TableField<PlayerPingsRecord, Int?> = createField(DSL.name("need_vision_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_pings.push_count</code>.
     */
    val PUSH_COUNT: TableField<PlayerPingsRecord, Int?> = createField(DSL.name("push_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_pings.vision_cleared_count</code>.
     */
    val VISION_CLEARED_COUNT: TableField<PlayerPingsRecord, Int?> = createField(DSL.name("vision_cleared_count"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<PlayerPingsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PlayerPingsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PlayerPingsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>dennys.player_pings</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>dennys.player_pings</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>dennys.player_pings</code> table reference
     */
    constructor(): this(DSL.name("player_pings"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, PlayerPingsRecord>?, parentPath: InverseForeignKey<out Record, PlayerPingsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, PLAYER_PINGS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class PlayerPingsPath : PlayerPings, Path<PlayerPingsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, PlayerPingsRecord>?, parentPath: InverseForeignKey<out Record, PlayerPingsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<PlayerPingsRecord>): super(alias, aliased)
        override fun `as`(alias: String): PlayerPingsPath = PlayerPingsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): PlayerPingsPath = PlayerPingsPath(alias, this)
        override fun `as`(alias: Table<*>): PlayerPingsPath = PlayerPingsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Dennys.DENNYS
    override fun getIdentity(): Identity<PlayerPingsRecord, Int?> = super.getIdentity() as Identity<PlayerPingsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PlayerPingsRecord> = PLAYER_PINGS_PKEY

    private lateinit var _playerGameFacts: PlayerGameFactsPath

    /**
     * Get the implicit to-many join path to the
     * <code>dennys.player_game_facts</code> table
     */
    fun playerGameFacts(): PlayerGameFactsPath {
        if (!this::_playerGameFacts.isInitialized)
            _playerGameFacts = PlayerGameFactsPath(this, null, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_PINGS_ID_FKEY.inverseKey)

        return _playerGameFacts;
    }

    val playerGameFacts: PlayerGameFactsPath
        get(): PlayerGameFactsPath = playerGameFacts()
    override fun `as`(alias: String): PlayerPings = PlayerPings(DSL.name(alias), this)
    override fun `as`(alias: Name): PlayerPings = PlayerPings(alias, this)
    override fun `as`(alias: Table<*>): PlayerPings = PlayerPings(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PlayerPings = PlayerPings(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PlayerPings = PlayerPings(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PlayerPings = PlayerPings(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PlayerPings = PlayerPings(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PlayerPings = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PlayerPings = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PlayerPings = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PlayerPings = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PlayerPings = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PlayerPings = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PlayerPings = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PlayerPings = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PlayerPings = where(DSL.notExists(select))
}
