/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables


import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.storage.Dennys
import org.jooq.storage.keys.PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_RIOT_ACCOUNT_ID_FKEY
import org.jooq.storage.keys.RIOT_ACCOUNTS_AUDIT_LOGS__RIOT_ACCOUNTS_AUDIT_LOGS_RIOT_ACCOUNT_ID_FKEY
import org.jooq.storage.keys.RIOT_ACCOUNTS_PKEY
import org.jooq.storage.keys.RIOT_ACCOUNTS_RIOT_PUUID_KEY
import org.jooq.storage.keys.RIOT_ACCOUNT_TO_PLAYER__RIOT_ACCOUNT_TO_PLAYER_RIOT_ACCOUNT_ID_FKEY
import org.jooq.storage.tables.PlayerGameFacts.PlayerGameFactsPath
import org.jooq.storage.tables.Players.PlayersPath
import org.jooq.storage.tables.RiotAccountToPlayer.RiotAccountToPlayerPath
import org.jooq.storage.tables.RiotAccountsAuditLogs.RiotAccountsAuditLogsPath
import org.jooq.storage.tables.records.RiotAccountsRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RiotAccounts(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, RiotAccountsRecord>?,
    parentPath: InverseForeignKey<out Record, RiotAccountsRecord>?,
    aliased: Table<RiotAccountsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<RiotAccountsRecord>(
    alias,
    Dennys.DENNYS,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>dennys.riot_accounts</code>
         */
        val RIOT_ACCOUNTS: RiotAccounts = RiotAccounts()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RiotAccountsRecord> = RiotAccountsRecord::class.java

    /**
     * The column <code>dennys.riot_accounts.id</code>.
     */
    val ID: TableField<RiotAccountsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>dennys.riot_accounts.riot_puuid</code>.
     */
    val RIOT_PUUID: TableField<RiotAccountsRecord, String?> = createField(DSL.name("riot_puuid"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<RiotAccountsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<RiotAccountsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<RiotAccountsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>dennys.riot_accounts</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>dennys.riot_accounts</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>dennys.riot_accounts</code> table reference
     */
    constructor(): this(DSL.name("riot_accounts"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, RiotAccountsRecord>?, parentPath: InverseForeignKey<out Record, RiotAccountsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, RIOT_ACCOUNTS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class RiotAccountsPath : RiotAccounts, Path<RiotAccountsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, RiotAccountsRecord>?, parentPath: InverseForeignKey<out Record, RiotAccountsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<RiotAccountsRecord>): super(alias, aliased)
        override fun `as`(alias: String): RiotAccountsPath = RiotAccountsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): RiotAccountsPath = RiotAccountsPath(alias, this)
        override fun `as`(alias: Table<*>): RiotAccountsPath = RiotAccountsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Dennys.DENNYS
    override fun getIdentity(): Identity<RiotAccountsRecord, Int?> = super.getIdentity() as Identity<RiotAccountsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<RiotAccountsRecord> = RIOT_ACCOUNTS_PKEY
    override fun getUniqueKeys(): List<UniqueKey<RiotAccountsRecord>> = listOf(RIOT_ACCOUNTS_RIOT_PUUID_KEY)

    private lateinit var _playerGameFacts: PlayerGameFactsPath

    /**
     * Get the implicit to-many join path to the
     * <code>dennys.player_game_facts</code> table
     */
    fun playerGameFacts(): PlayerGameFactsPath {
        if (!this::_playerGameFacts.isInitialized)
            _playerGameFacts = PlayerGameFactsPath(this, null, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_RIOT_ACCOUNT_ID_FKEY.inverseKey)

        return _playerGameFacts;
    }

    val playerGameFacts: PlayerGameFactsPath
        get(): PlayerGameFactsPath = playerGameFacts()

    private lateinit var _riotAccountToPlayer: RiotAccountToPlayerPath

    /**
     * Get the implicit to-many join path to the
     * <code>dennys.riot_account_to_player</code> table
     */
    fun riotAccountToPlayer(): RiotAccountToPlayerPath {
        if (!this::_riotAccountToPlayer.isInitialized)
            _riotAccountToPlayer = RiotAccountToPlayerPath(this, null, RIOT_ACCOUNT_TO_PLAYER__RIOT_ACCOUNT_TO_PLAYER_RIOT_ACCOUNT_ID_FKEY.inverseKey)

        return _riotAccountToPlayer;
    }

    val riotAccountToPlayer: RiotAccountToPlayerPath
        get(): RiotAccountToPlayerPath = riotAccountToPlayer()

    private lateinit var _riotAccountsAuditLogs: RiotAccountsAuditLogsPath

    /**
     * Get the implicit to-many join path to the
     * <code>dennys.riot_accounts_audit_logs</code> table
     */
    fun riotAccountsAuditLogs(): RiotAccountsAuditLogsPath {
        if (!this::_riotAccountsAuditLogs.isInitialized)
            _riotAccountsAuditLogs = RiotAccountsAuditLogsPath(this, null, RIOT_ACCOUNTS_AUDIT_LOGS__RIOT_ACCOUNTS_AUDIT_LOGS_RIOT_ACCOUNT_ID_FKEY.inverseKey)

        return _riotAccountsAuditLogs;
    }

    val riotAccountsAuditLogs: RiotAccountsAuditLogsPath
        get(): RiotAccountsAuditLogsPath = riotAccountsAuditLogs()

    /**
     * Get the implicit many-to-many join path to the
     * <code>dennys.players</code> table
     */
    val players: PlayersPath
        get(): PlayersPath = riotAccountToPlayer().players()
    override fun `as`(alias: String): RiotAccounts = RiotAccounts(DSL.name(alias), this)
    override fun `as`(alias: Name): RiotAccounts = RiotAccounts(alias, this)
    override fun `as`(alias: Table<*>): RiotAccounts = RiotAccounts(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): RiotAccounts = RiotAccounts(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RiotAccounts = RiotAccounts(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): RiotAccounts = RiotAccounts(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): RiotAccounts = RiotAccounts(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): RiotAccounts = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): RiotAccounts = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): RiotAccounts = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): RiotAccounts = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): RiotAccounts = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): RiotAccounts = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): RiotAccounts = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): RiotAccounts = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): RiotAccounts = where(DSL.notExists(select))
}
