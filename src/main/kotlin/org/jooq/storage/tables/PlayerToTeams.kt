/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables


import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.storage.Dennys
import org.jooq.storage.keys.PLAYER_TO_TEAMS_PKEY
import org.jooq.storage.keys.PLAYER_TO_TEAMS__PLAYER_TO_TEAMS_EVENT_ID_FKEY
import org.jooq.storage.keys.PLAYER_TO_TEAMS__PLAYER_TO_TEAMS_PLAYER_ID_FKEY
import org.jooq.storage.keys.PLAYER_TO_TEAMS__PLAYER_TO_TEAMS_TEAM_ID_FKEY
import org.jooq.storage.tables.records.PlayerToTeamsRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerToTeams(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, PlayerToTeamsRecord>?,
    aliased: Table<PlayerToTeamsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<PlayerToTeamsRecord>(
    alias,
    Dennys.DENNYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>dennys.player_to_teams</code>
         */
        val PLAYER_TO_TEAMS: PlayerToTeams = PlayerToTeams()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PlayerToTeamsRecord> = PlayerToTeamsRecord::class.java

    /**
     * The column <code>dennys.player_to_teams.player_id</code>.
     */
    val PLAYER_ID: TableField<PlayerToTeamsRecord, Int?> = createField(DSL.name("player_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_to_teams.team_id</code>.
     */
    val TEAM_ID: TableField<PlayerToTeamsRecord, Int?> = createField(DSL.name("team_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.player_to_teams.event_id</code>.
     */
    val EVENT_ID: TableField<PlayerToTeamsRecord, Int?> = createField(DSL.name("event_id"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<PlayerToTeamsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<PlayerToTeamsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>dennys.player_to_teams</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>dennys.player_to_teams</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>dennys.player_to_teams</code> table reference
     */
    constructor(): this(DSL.name("player_to_teams"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, PlayerToTeamsRecord>): this(Internal.createPathAlias(child, key), child, key, PLAYER_TO_TEAMS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Dennys.DENNYS
    override fun getPrimaryKey(): UniqueKey<PlayerToTeamsRecord> = PLAYER_TO_TEAMS_PKEY
    override fun getReferences(): List<ForeignKey<PlayerToTeamsRecord, *>> = listOf(PLAYER_TO_TEAMS__PLAYER_TO_TEAMS_PLAYER_ID_FKEY, PLAYER_TO_TEAMS__PLAYER_TO_TEAMS_TEAM_ID_FKEY, PLAYER_TO_TEAMS__PLAYER_TO_TEAMS_EVENT_ID_FKEY)

    private lateinit var _players: Players
    private lateinit var _teams: Teams
    private lateinit var _events: Events

    /**
     * Get the implicit join path to the <code>dennys.players</code> table.
     */
    fun players(): Players {
        if (!this::_players.isInitialized)
            _players = Players(this, PLAYER_TO_TEAMS__PLAYER_TO_TEAMS_PLAYER_ID_FKEY)

        return _players;
    }

    val players: Players
        get(): Players = players()

    /**
     * Get the implicit join path to the <code>dennys.teams</code> table.
     */
    fun teams(): Teams {
        if (!this::_teams.isInitialized)
            _teams = Teams(this, PLAYER_TO_TEAMS__PLAYER_TO_TEAMS_TEAM_ID_FKEY)

        return _teams;
    }

    val teams: Teams
        get(): Teams = teams()

    /**
     * Get the implicit join path to the <code>dennys.events</code> table.
     */
    fun events(): Events {
        if (!this::_events.isInitialized)
            _events = Events(this, PLAYER_TO_TEAMS__PLAYER_TO_TEAMS_EVENT_ID_FKEY)

        return _events;
    }

    val events: Events
        get(): Events = events()
    override fun `as`(alias: String): PlayerToTeams = PlayerToTeams(DSL.name(alias), this)
    override fun `as`(alias: Name): PlayerToTeams = PlayerToTeams(alias, this)
    override fun `as`(alias: Table<*>): PlayerToTeams = PlayerToTeams(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PlayerToTeams = PlayerToTeams(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PlayerToTeams = PlayerToTeams(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PlayerToTeams = PlayerToTeams(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Int?, Int?, Int?> = super.fieldsRow() as Row3<Int?, Int?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
