/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables


import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.storage.Dennys
import org.jooq.storage.keys.TEAM_TO_SERIES_PKEY
import org.jooq.storage.keys.TEAM_TO_SERIES__TEAM_TO_SERIES_SERIES_ID_FKEY
import org.jooq.storage.keys.TEAM_TO_SERIES__TEAM_TO_SERIES_TEAM_ID_FKEY
import org.jooq.storage.tables.Series.SeriesPath
import org.jooq.storage.tables.Teams.TeamsPath
import org.jooq.storage.tables.records.TeamToSeriesRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TeamToSeries(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, TeamToSeriesRecord>?,
    parentPath: InverseForeignKey<out Record, TeamToSeriesRecord>?,
    aliased: Table<TeamToSeriesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<TeamToSeriesRecord>(
    alias,
    Dennys.DENNYS,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>dennys.team_to_series</code>
         */
        val TEAM_TO_SERIES: TeamToSeries = TeamToSeries()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TeamToSeriesRecord> = TeamToSeriesRecord::class.java

    /**
     * The column <code>dennys.team_to_series.team_id</code>.
     */
    val TEAM_ID: TableField<TeamToSeriesRecord, Int?> = createField(DSL.name("team_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.team_to_series.series_id</code>.
     */
    val SERIES_ID: TableField<TeamToSeriesRecord, Int?> = createField(DSL.name("series_id"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<TeamToSeriesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<TeamToSeriesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<TeamToSeriesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>dennys.team_to_series</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>dennys.team_to_series</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>dennys.team_to_series</code> table reference
     */
    constructor(): this(DSL.name("team_to_series"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, TeamToSeriesRecord>?, parentPath: InverseForeignKey<out Record, TeamToSeriesRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, TEAM_TO_SERIES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class TeamToSeriesPath : TeamToSeries, Path<TeamToSeriesRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, TeamToSeriesRecord>?, parentPath: InverseForeignKey<out Record, TeamToSeriesRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<TeamToSeriesRecord>): super(alias, aliased)
        override fun `as`(alias: String): TeamToSeriesPath = TeamToSeriesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): TeamToSeriesPath = TeamToSeriesPath(alias, this)
        override fun `as`(alias: Table<*>): TeamToSeriesPath = TeamToSeriesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Dennys.DENNYS
    override fun getPrimaryKey(): UniqueKey<TeamToSeriesRecord> = TEAM_TO_SERIES_PKEY
    override fun getReferences(): List<ForeignKey<TeamToSeriesRecord, *>> = listOf(TEAM_TO_SERIES__TEAM_TO_SERIES_SERIES_ID_FKEY, TEAM_TO_SERIES__TEAM_TO_SERIES_TEAM_ID_FKEY)

    private lateinit var _series: SeriesPath

    /**
     * Get the implicit join path to the <code>dennys.series</code> table.
     */
    fun series(): SeriesPath {
        if (!this::_series.isInitialized)
            _series = SeriesPath(this, TEAM_TO_SERIES__TEAM_TO_SERIES_SERIES_ID_FKEY, null)

        return _series;
    }

    val series: SeriesPath
        get(): SeriesPath = series()

    private lateinit var _teams: TeamsPath

    /**
     * Get the implicit join path to the <code>dennys.teams</code> table.
     */
    fun teams(): TeamsPath {
        if (!this::_teams.isInitialized)
            _teams = TeamsPath(this, TEAM_TO_SERIES__TEAM_TO_SERIES_TEAM_ID_FKEY, null)

        return _teams;
    }

    val teams: TeamsPath
        get(): TeamsPath = teams()
    override fun `as`(alias: String): TeamToSeries = TeamToSeries(DSL.name(alias), this)
    override fun `as`(alias: Name): TeamToSeries = TeamToSeries(alias, this)
    override fun `as`(alias: Table<*>): TeamToSeries = TeamToSeries(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TeamToSeries = TeamToSeries(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TeamToSeries = TeamToSeries(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TeamToSeries = TeamToSeries(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): TeamToSeries = TeamToSeries(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): TeamToSeries = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): TeamToSeries = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): TeamToSeries = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): TeamToSeries = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): TeamToSeries = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): TeamToSeries = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): TeamToSeries = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): TeamToSeries = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): TeamToSeries = where(DSL.notExists(select))
}
