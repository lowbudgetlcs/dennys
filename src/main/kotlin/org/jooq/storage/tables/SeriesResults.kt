/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables


import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.storage.Dennys
import org.jooq.storage.keys.SERIES_RESULTS_PKEY
import org.jooq.storage.keys.SERIES_RESULTS__SERIES_RESULTS_LOSER_TEAM_ID_FKEY
import org.jooq.storage.keys.SERIES_RESULTS__SERIES_RESULTS_SERIES_ID_FKEY
import org.jooq.storage.keys.SERIES_RESULTS__SERIES_RESULTS_WINNER_TEAM_ID_FKEY
import org.jooq.storage.tables.records.SeriesResultsRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SeriesResults(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, SeriesResultsRecord>?,
    aliased: Table<SeriesResultsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<SeriesResultsRecord>(
    alias,
    Dennys.DENNYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>dennys.series_results</code>
         */
        val SERIES_RESULTS: SeriesResults = SeriesResults()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SeriesResultsRecord> = SeriesResultsRecord::class.java

    /**
     * The column <code>dennys.series_results.series_id</code>.
     */
    val SERIES_ID: TableField<SeriesResultsRecord, Int?> = createField(DSL.name("series_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.series_results.winner_team_id</code>.
     */
    val WINNER_TEAM_ID: TableField<SeriesResultsRecord, Int?> = createField(DSL.name("winner_team_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.series_results.loser_team_id</code>.
     */
    val LOSER_TEAM_ID: TableField<SeriesResultsRecord, Int?> = createField(DSL.name("loser_team_id"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<SeriesResultsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<SeriesResultsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>dennys.series_results</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>dennys.series_results</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>dennys.series_results</code> table reference
     */
    constructor(): this(DSL.name("series_results"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, SeriesResultsRecord>): this(Internal.createPathAlias(child, key), child, key, SERIES_RESULTS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Dennys.DENNYS
    override fun getPrimaryKey(): UniqueKey<SeriesResultsRecord> = SERIES_RESULTS_PKEY
    override fun getReferences(): List<ForeignKey<SeriesResultsRecord, *>> = listOf(SERIES_RESULTS__SERIES_RESULTS_SERIES_ID_FKEY, SERIES_RESULTS__SERIES_RESULTS_WINNER_TEAM_ID_FKEY, SERIES_RESULTS__SERIES_RESULTS_LOSER_TEAM_ID_FKEY)

    private lateinit var _series: Series
    private lateinit var _seriesResultsWinnerTeamIdFkey: Teams
    private lateinit var _seriesResultsLoserTeamIdFkey: Teams

    /**
     * Get the implicit join path to the <code>dennys.series</code> table.
     */
    fun series(): Series {
        if (!this::_series.isInitialized)
            _series = Series(this, SERIES_RESULTS__SERIES_RESULTS_SERIES_ID_FKEY)

        return _series;
    }

    val series: Series
        get(): Series = series()

    /**
     * Get the implicit join path to the <code>dennys.teams</code> table, via
     * the <code>series_results_winner_team_id_fkey</code> key.
     */
    fun seriesResultsWinnerTeamIdFkey(): Teams {
        if (!this::_seriesResultsWinnerTeamIdFkey.isInitialized)
            _seriesResultsWinnerTeamIdFkey = Teams(this, SERIES_RESULTS__SERIES_RESULTS_WINNER_TEAM_ID_FKEY)

        return _seriesResultsWinnerTeamIdFkey;
    }

    val seriesResultsWinnerTeamIdFkey: Teams
        get(): Teams = seriesResultsWinnerTeamIdFkey()

    /**
     * Get the implicit join path to the <code>dennys.teams</code> table, via
     * the <code>series_results_loser_team_id_fkey</code> key.
     */
    fun seriesResultsLoserTeamIdFkey(): Teams {
        if (!this::_seriesResultsLoserTeamIdFkey.isInitialized)
            _seriesResultsLoserTeamIdFkey = Teams(this, SERIES_RESULTS__SERIES_RESULTS_LOSER_TEAM_ID_FKEY)

        return _seriesResultsLoserTeamIdFkey;
    }

    val seriesResultsLoserTeamIdFkey: Teams
        get(): Teams = seriesResultsLoserTeamIdFkey()
    override fun `as`(alias: String): SeriesResults = SeriesResults(DSL.name(alias), this)
    override fun `as`(alias: Name): SeriesResults = SeriesResults(alias, this)
    override fun `as`(alias: Table<*>): SeriesResults = SeriesResults(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SeriesResults = SeriesResults(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SeriesResults = SeriesResults(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): SeriesResults = SeriesResults(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Int?, Int?, Int?> = super.fieldsRow() as Row3<Int?, Int?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
