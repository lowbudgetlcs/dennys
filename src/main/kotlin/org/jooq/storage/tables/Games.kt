/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables


import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.storage.Dennys
import org.jooq.storage.keys.GAMES_PKEY
import org.jooq.storage.keys.GAMES__GAMES_BLUE_TEAM_ID_FKEY
import org.jooq.storage.keys.GAMES__GAMES_RED_TEAM_ID_FKEY
import org.jooq.storage.keys.GAMES__GAMES_SERIES_ID_FKEY
import org.jooq.storage.tables.records.GamesRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Games(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, GamesRecord>?,
    aliased: Table<GamesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<GamesRecord>(
    alias,
    Dennys.DENNYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>dennys.games</code>
         */
        val GAMES: Games = Games()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GamesRecord> = GamesRecord::class.java

    /**
     * The column <code>dennys.games.id</code>.
     */
    val ID: TableField<GamesRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>dennys.games.shortcode</code>.
     */
    val SHORTCODE: TableField<GamesRecord, String?> = createField(DSL.name("shortcode"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>dennys.games.blue_team_id</code>.
     */
    val BLUE_TEAM_ID: TableField<GamesRecord, Int?> = createField(DSL.name("blue_team_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.games.red_team_id</code>.
     */
    val RED_TEAM_ID: TableField<GamesRecord, Int?> = createField(DSL.name("red_team_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.games.series_id</code>.
     */
    val SERIES_ID: TableField<GamesRecord, Int?> = createField(DSL.name("series_id"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<GamesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<GamesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>dennys.games</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>dennys.games</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>dennys.games</code> table reference
     */
    constructor(): this(DSL.name("games"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, GamesRecord>): this(Internal.createPathAlias(child, key), child, key, GAMES, null)
    override fun getSchema(): Schema? = if (aliased()) null else Dennys.DENNYS
    override fun getIdentity(): Identity<GamesRecord, Int?> = super.getIdentity() as Identity<GamesRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<GamesRecord> = GAMES_PKEY
    override fun getReferences(): List<ForeignKey<GamesRecord, *>> = listOf(GAMES__GAMES_BLUE_TEAM_ID_FKEY, GAMES__GAMES_RED_TEAM_ID_FKEY, GAMES__GAMES_SERIES_ID_FKEY)

    private lateinit var _gamesBlueTeamIdFkey: Teams
    private lateinit var _gamesRedTeamIdFkey: Teams
    private lateinit var _series: Series

    /**
     * Get the implicit join path to the <code>dennys.teams</code> table, via
     * the <code>games_blue_team_id_fkey</code> key.
     */
    fun gamesBlueTeamIdFkey(): Teams {
        if (!this::_gamesBlueTeamIdFkey.isInitialized)
            _gamesBlueTeamIdFkey = Teams(this, GAMES__GAMES_BLUE_TEAM_ID_FKEY)

        return _gamesBlueTeamIdFkey;
    }

    val gamesBlueTeamIdFkey: Teams
        get(): Teams = gamesBlueTeamIdFkey()

    /**
     * Get the implicit join path to the <code>dennys.teams</code> table, via
     * the <code>games_red_team_id_fkey</code> key.
     */
    fun gamesRedTeamIdFkey(): Teams {
        if (!this::_gamesRedTeamIdFkey.isInitialized)
            _gamesRedTeamIdFkey = Teams(this, GAMES__GAMES_RED_TEAM_ID_FKEY)

        return _gamesRedTeamIdFkey;
    }

    val gamesRedTeamIdFkey: Teams
        get(): Teams = gamesRedTeamIdFkey()

    /**
     * Get the implicit join path to the <code>dennys.series</code> table.
     */
    fun series(): Series {
        if (!this::_series.isInitialized)
            _series = Series(this, GAMES__GAMES_SERIES_ID_FKEY)

        return _series;
    }

    val series: Series
        get(): Series = series()
    override fun `as`(alias: String): Games = Games(DSL.name(alias), this)
    override fun `as`(alias: Name): Games = Games(alias, this)
    override fun `as`(alias: Table<*>): Games = Games(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Games = Games(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Games = Games(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Games = Games(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<Int?, String?, Int?, Int?, Int?> = super.fieldsRow() as Row5<Int?, String?, Int?, Int?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, String?, Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, String?, Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
