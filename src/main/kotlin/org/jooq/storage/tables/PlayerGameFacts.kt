/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables


import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row10
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.storage.Dennys
import org.jooq.storage.keys.PLAYER_GAME_FACTS_PKEY
import org.jooq.storage.keys.PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_CHAMP_SELECT_ID_FKEY
import org.jooq.storage.keys.PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_COMBATS_ID_FKEY
import org.jooq.storage.keys.PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_FARMING_ID_FKEY
import org.jooq.storage.keys.PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_INVENTORIES_ID_FKEY
import org.jooq.storage.keys.PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_PINGS_ID_FKEY
import org.jooq.storage.keys.PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_VISION_ID_FKEY
import org.jooq.storage.keys.PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_RIOT_ACCOUNT_ID_FKEY
import org.jooq.storage.tables.records.PlayerGameFactsRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerGameFacts(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, PlayerGameFactsRecord>?,
    aliased: Table<PlayerGameFactsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<PlayerGameFactsRecord>(
    alias,
    Dennys.DENNYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>dennys.player_game_facts</code>
         */
        val PLAYER_GAME_FACTS: PlayerGameFacts = PlayerGameFacts()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PlayerGameFactsRecord> = PlayerGameFactsRecord::class.java

    /**
     * The column <code>dennys.player_game_facts.id</code>.
     */
    val ID: TableField<PlayerGameFactsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>dennys.player_game_facts.riot_account_id</code>.
     */
    val RIOT_ACCOUNT_ID: TableField<PlayerGameFactsRecord, Int?> = createField(DSL.name("riot_account_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.player_game_facts.side</code>.
     */
    val SIDE: TableField<PlayerGameFactsRecord, Int?> = createField(DSL.name("side"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_game_facts.shortcode</code>.
     */
    val SHORTCODE: TableField<PlayerGameFactsRecord, String?> = createField(DSL.name("shortcode"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>dennys.player_game_facts.player_champ_select_id</code>.
     */
    val PLAYER_CHAMP_SELECT_ID: TableField<PlayerGameFactsRecord, Int?> = createField(DSL.name("player_champ_select_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.player_game_facts.player_inventories_id</code>.
     */
    val PLAYER_INVENTORIES_ID: TableField<PlayerGameFactsRecord, Int?> = createField(DSL.name("player_inventories_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.player_game_facts.player_combats_id</code>.
     */
    val PLAYER_COMBATS_ID: TableField<PlayerGameFactsRecord, Int?> = createField(DSL.name("player_combats_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.player_game_facts.player_vision_id</code>.
     */
    val PLAYER_VISION_ID: TableField<PlayerGameFactsRecord, Int?> = createField(DSL.name("player_vision_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.player_game_facts.player_pings_id</code>.
     */
    val PLAYER_PINGS_ID: TableField<PlayerGameFactsRecord, Int?> = createField(DSL.name("player_pings_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.player_game_facts.player_farming_id</code>.
     */
    val PLAYER_FARMING_ID: TableField<PlayerGameFactsRecord, Int?> = createField(DSL.name("player_farming_id"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<PlayerGameFactsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<PlayerGameFactsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>dennys.player_game_facts</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>dennys.player_game_facts</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>dennys.player_game_facts</code> table reference
     */
    constructor(): this(DSL.name("player_game_facts"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, PlayerGameFactsRecord>): this(Internal.createPathAlias(child, key), child, key, PLAYER_GAME_FACTS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Dennys.DENNYS
    override fun getIdentity(): Identity<PlayerGameFactsRecord, Int?> = super.getIdentity() as Identity<PlayerGameFactsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PlayerGameFactsRecord> = PLAYER_GAME_FACTS_PKEY
    override fun getReferences(): List<ForeignKey<PlayerGameFactsRecord, *>> = listOf(PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_RIOT_ACCOUNT_ID_FKEY, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_CHAMP_SELECT_ID_FKEY, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_INVENTORIES_ID_FKEY, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_COMBATS_ID_FKEY, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_VISION_ID_FKEY, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_PINGS_ID_FKEY, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_FARMING_ID_FKEY)

    private lateinit var _riotAccounts: RiotAccounts
    private lateinit var _playerChampSelects: PlayerChampSelects
    private lateinit var _playerInventories: PlayerInventories
    private lateinit var _playerCombats: PlayerCombats
    private lateinit var _playerVision: PlayerVision
    private lateinit var _playerPings: PlayerPings
    private lateinit var _playerFarming: PlayerFarming

    /**
     * Get the implicit join path to the <code>dennys.riot_accounts</code>
     * table.
     */
    fun riotAccounts(): RiotAccounts {
        if (!this::_riotAccounts.isInitialized)
            _riotAccounts = RiotAccounts(this, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_RIOT_ACCOUNT_ID_FKEY)

        return _riotAccounts;
    }

    val riotAccounts: RiotAccounts
        get(): RiotAccounts = riotAccounts()

    /**
     * Get the implicit join path to the
     * <code>dennys.player_champ_selects</code> table.
     */
    fun playerChampSelects(): PlayerChampSelects {
        if (!this::_playerChampSelects.isInitialized)
            _playerChampSelects = PlayerChampSelects(this, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_CHAMP_SELECT_ID_FKEY)

        return _playerChampSelects;
    }

    val playerChampSelects: PlayerChampSelects
        get(): PlayerChampSelects = playerChampSelects()

    /**
     * Get the implicit join path to the <code>dennys.player_inventories</code>
     * table.
     */
    fun playerInventories(): PlayerInventories {
        if (!this::_playerInventories.isInitialized)
            _playerInventories = PlayerInventories(this, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_INVENTORIES_ID_FKEY)

        return _playerInventories;
    }

    val playerInventories: PlayerInventories
        get(): PlayerInventories = playerInventories()

    /**
     * Get the implicit join path to the <code>dennys.player_combats</code>
     * table.
     */
    fun playerCombats(): PlayerCombats {
        if (!this::_playerCombats.isInitialized)
            _playerCombats = PlayerCombats(this, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_COMBATS_ID_FKEY)

        return _playerCombats;
    }

    val playerCombats: PlayerCombats
        get(): PlayerCombats = playerCombats()

    /**
     * Get the implicit join path to the <code>dennys.player_vision</code>
     * table.
     */
    fun playerVision(): PlayerVision {
        if (!this::_playerVision.isInitialized)
            _playerVision = PlayerVision(this, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_VISION_ID_FKEY)

        return _playerVision;
    }

    val playerVision: PlayerVision
        get(): PlayerVision = playerVision()

    /**
     * Get the implicit join path to the <code>dennys.player_pings</code> table.
     */
    fun playerPings(): PlayerPings {
        if (!this::_playerPings.isInitialized)
            _playerPings = PlayerPings(this, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_PINGS_ID_FKEY)

        return _playerPings;
    }

    val playerPings: PlayerPings
        get(): PlayerPings = playerPings()

    /**
     * Get the implicit join path to the <code>dennys.player_farming</code>
     * table.
     */
    fun playerFarming(): PlayerFarming {
        if (!this::_playerFarming.isInitialized)
            _playerFarming = PlayerFarming(this, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_FARMING_ID_FKEY)

        return _playerFarming;
    }

    val playerFarming: PlayerFarming
        get(): PlayerFarming = playerFarming()
    override fun `as`(alias: String): PlayerGameFacts = PlayerGameFacts(DSL.name(alias), this)
    override fun `as`(alias: Name): PlayerGameFacts = PlayerGameFacts(alias, this)
    override fun `as`(alias: Table<*>): PlayerGameFacts = PlayerGameFacts(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PlayerGameFacts = PlayerGameFacts(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PlayerGameFacts = PlayerGameFacts(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PlayerGameFacts = PlayerGameFacts(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row10<Int?, Int?, Int?, String?, Int?, Int?, Int?, Int?, Int?, Int?> = super.fieldsRow() as Row10<Int?, Int?, Int?, String?, Int?, Int?, Int?, Int?, Int?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, Int?, String?, Int?, Int?, Int?, Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, Int?, String?, Int?, Int?, Int?, Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
