/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables


import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.storage.Dennys
import org.jooq.storage.keys.GAMES_RESULTS_PKEY
import org.jooq.storage.keys.GAMES_RESULTS__GAMES_RESULTS_GAME_ID_FKEY
import org.jooq.storage.keys.GAMES_RESULTS__GAMES_RESULTS_LOSER_TEAM_ID_FKEY
import org.jooq.storage.keys.GAMES_RESULTS__GAMES_RESULTS_WINNER_TEAM_ID_FKEY
import org.jooq.storage.tables.records.GamesResultsRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GamesResults(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, GamesResultsRecord>?,
    aliased: Table<GamesResultsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<GamesResultsRecord>(
    alias,
    Dennys.DENNYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>dennys.games_results</code>
         */
        val GAMES_RESULTS: GamesResults = GamesResults()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GamesResultsRecord> = GamesResultsRecord::class.java

    /**
     * The column <code>dennys.games_results.game_id</code>.
     */
    val GAME_ID: TableField<GamesResultsRecord, Int?> = createField(DSL.name("game_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.games_results.winner_team_id</code>.
     */
    val WINNER_TEAM_ID: TableField<GamesResultsRecord, Int?> = createField(DSL.name("winner_team_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.games_results.loser_team_id</code>.
     */
    val LOSER_TEAM_ID: TableField<GamesResultsRecord, Int?> = createField(DSL.name("loser_team_id"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<GamesResultsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<GamesResultsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>dennys.games_results</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>dennys.games_results</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>dennys.games_results</code> table reference
     */
    constructor(): this(DSL.name("games_results"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, GamesResultsRecord>): this(Internal.createPathAlias(child, key), child, key, GAMES_RESULTS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Dennys.DENNYS
    override fun getPrimaryKey(): UniqueKey<GamesResultsRecord> = GAMES_RESULTS_PKEY
    override fun getReferences(): List<ForeignKey<GamesResultsRecord, *>> = listOf(GAMES_RESULTS__GAMES_RESULTS_GAME_ID_FKEY, GAMES_RESULTS__GAMES_RESULTS_WINNER_TEAM_ID_FKEY, GAMES_RESULTS__GAMES_RESULTS_LOSER_TEAM_ID_FKEY)

    private lateinit var _games: Games
    private lateinit var _gamesResultsWinnerTeamIdFkey: Teams
    private lateinit var _gamesResultsLoserTeamIdFkey: Teams

    /**
     * Get the implicit join path to the <code>dennys.games</code> table.
     */
    fun games(): Games {
        if (!this::_games.isInitialized)
            _games = Games(this, GAMES_RESULTS__GAMES_RESULTS_GAME_ID_FKEY)

        return _games;
    }

    val games: Games
        get(): Games = games()

    /**
     * Get the implicit join path to the <code>dennys.teams</code> table, via
     * the <code>games_results_winner_team_id_fkey</code> key.
     */
    fun gamesResultsWinnerTeamIdFkey(): Teams {
        if (!this::_gamesResultsWinnerTeamIdFkey.isInitialized)
            _gamesResultsWinnerTeamIdFkey = Teams(this, GAMES_RESULTS__GAMES_RESULTS_WINNER_TEAM_ID_FKEY)

        return _gamesResultsWinnerTeamIdFkey;
    }

    val gamesResultsWinnerTeamIdFkey: Teams
        get(): Teams = gamesResultsWinnerTeamIdFkey()

    /**
     * Get the implicit join path to the <code>dennys.teams</code> table, via
     * the <code>games_results_loser_team_id_fkey</code> key.
     */
    fun gamesResultsLoserTeamIdFkey(): Teams {
        if (!this::_gamesResultsLoserTeamIdFkey.isInitialized)
            _gamesResultsLoserTeamIdFkey = Teams(this, GAMES_RESULTS__GAMES_RESULTS_LOSER_TEAM_ID_FKEY)

        return _gamesResultsLoserTeamIdFkey;
    }

    val gamesResultsLoserTeamIdFkey: Teams
        get(): Teams = gamesResultsLoserTeamIdFkey()
    override fun `as`(alias: String): GamesResults = GamesResults(DSL.name(alias), this)
    override fun `as`(alias: Name): GamesResults = GamesResults(alias, this)
    override fun `as`(alias: Table<*>): GamesResults = GamesResults(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): GamesResults = GamesResults(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GamesResults = GamesResults(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): GamesResults = GamesResults(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Int?, Int?, Int?> = super.fieldsRow() as Row3<Int?, Int?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
