/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables


import java.time.Instant
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.storage.Dennys
import org.jooq.storage.keys.PLAYER_AUDIT_LOGS_PKEY
import org.jooq.storage.keys.PLAYER_AUDIT_LOGS__PLAYER_AUDIT_LOGS_PLAYER_ID_FKEY
import org.jooq.storage.tables.records.PlayerAuditLogsRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerAuditLogs(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, PlayerAuditLogsRecord>?,
    aliased: Table<PlayerAuditLogsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<PlayerAuditLogsRecord>(
    alias,
    Dennys.DENNYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>dennys.player_audit_logs</code>
         */
        val PLAYER_AUDIT_LOGS: PlayerAuditLogs = PlayerAuditLogs()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PlayerAuditLogsRecord> = PlayerAuditLogsRecord::class.java

    /**
     * The column <code>dennys.player_audit_logs.id</code>.
     */
    val ID: TableField<PlayerAuditLogsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>dennys.player_audit_logs.created_at</code>.
     */
    val CREATED_AT: TableField<PlayerAuditLogsRecord, Instant?> = createField(DSL.name("created_at"), SQLDataType.INSTANT.defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.INSTANT)), this, "")

    /**
     * The column <code>dennys.player_audit_logs.player_id</code>.
     */
    val PLAYER_ID: TableField<PlayerAuditLogsRecord, Int?> = createField(DSL.name("player_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.player_audit_logs.action</code>.
     */
    val ACTION: TableField<PlayerAuditLogsRecord, String?> = createField(DSL.name("action"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>dennys.player_audit_logs.message</code>.
     */
    val MESSAGE: TableField<PlayerAuditLogsRecord, String?> = createField(DSL.name("message"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>dennys.player_audit_logs.origin</code>.
     */
    val ORIGIN: TableField<PlayerAuditLogsRecord, String?> = createField(DSL.name("origin"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<PlayerAuditLogsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<PlayerAuditLogsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>dennys.player_audit_logs</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>dennys.player_audit_logs</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>dennys.player_audit_logs</code> table reference
     */
    constructor(): this(DSL.name("player_audit_logs"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, PlayerAuditLogsRecord>): this(Internal.createPathAlias(child, key), child, key, PLAYER_AUDIT_LOGS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Dennys.DENNYS
    override fun getIdentity(): Identity<PlayerAuditLogsRecord, Int?> = super.getIdentity() as Identity<PlayerAuditLogsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PlayerAuditLogsRecord> = PLAYER_AUDIT_LOGS_PKEY
    override fun getReferences(): List<ForeignKey<PlayerAuditLogsRecord, *>> = listOf(PLAYER_AUDIT_LOGS__PLAYER_AUDIT_LOGS_PLAYER_ID_FKEY)

    private lateinit var _players: Players

    /**
     * Get the implicit join path to the <code>dennys.players</code> table.
     */
    fun players(): Players {
        if (!this::_players.isInitialized)
            _players = Players(this, PLAYER_AUDIT_LOGS__PLAYER_AUDIT_LOGS_PLAYER_ID_FKEY)

        return _players;
    }

    val players: Players
        get(): Players = players()
    override fun `as`(alias: String): PlayerAuditLogs = PlayerAuditLogs(DSL.name(alias), this)
    override fun `as`(alias: Name): PlayerAuditLogs = PlayerAuditLogs(alias, this)
    override fun `as`(alias: Table<*>): PlayerAuditLogs = PlayerAuditLogs(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PlayerAuditLogs = PlayerAuditLogs(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PlayerAuditLogs = PlayerAuditLogs(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PlayerAuditLogs = PlayerAuditLogs(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<Int?, Instant?, Int?, String?, String?, String?> = super.fieldsRow() as Row6<Int?, Instant?, Int?, String?, String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Instant?, Int?, String?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Instant?, Int?, String?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
