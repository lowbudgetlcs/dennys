/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables


import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.storage.Dennys
import org.jooq.storage.keys.RIOT_ACCOUNT_TO_PLAYER_PKEY
import org.jooq.storage.keys.RIOT_ACCOUNT_TO_PLAYER__RIOT_ACCOUNT_TO_PLAYER_PLAYER_ID_FKEY
import org.jooq.storage.keys.RIOT_ACCOUNT_TO_PLAYER__RIOT_ACCOUNT_TO_PLAYER_RIOT_ACCOUNT_ID_FKEY
import org.jooq.storage.tables.records.RiotAccountToPlayerRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RiotAccountToPlayer(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, RiotAccountToPlayerRecord>?,
    aliased: Table<RiotAccountToPlayerRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<RiotAccountToPlayerRecord>(
    alias,
    Dennys.DENNYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>dennys.riot_account_to_player</code>
         */
        val RIOT_ACCOUNT_TO_PLAYER: RiotAccountToPlayer = RiotAccountToPlayer()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RiotAccountToPlayerRecord> = RiotAccountToPlayerRecord::class.java

    /**
     * The column <code>dennys.riot_account_to_player.player_id</code>.
     */
    val PLAYER_ID: TableField<RiotAccountToPlayerRecord, Int?> = createField(DSL.name("player_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.riot_account_to_player.riot_account_id</code>.
     */
    val RIOT_ACCOUNT_ID: TableField<RiotAccountToPlayerRecord, Int?> = createField(DSL.name("riot_account_id"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<RiotAccountToPlayerRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<RiotAccountToPlayerRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>dennys.riot_account_to_player</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>dennys.riot_account_to_player</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>dennys.riot_account_to_player</code> table reference
     */
    constructor(): this(DSL.name("riot_account_to_player"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, RiotAccountToPlayerRecord>): this(Internal.createPathAlias(child, key), child, key, RIOT_ACCOUNT_TO_PLAYER, null)
    override fun getSchema(): Schema? = if (aliased()) null else Dennys.DENNYS
    override fun getPrimaryKey(): UniqueKey<RiotAccountToPlayerRecord> = RIOT_ACCOUNT_TO_PLAYER_PKEY
    override fun getReferences(): List<ForeignKey<RiotAccountToPlayerRecord, *>> = listOf(RIOT_ACCOUNT_TO_PLAYER__RIOT_ACCOUNT_TO_PLAYER_PLAYER_ID_FKEY, RIOT_ACCOUNT_TO_PLAYER__RIOT_ACCOUNT_TO_PLAYER_RIOT_ACCOUNT_ID_FKEY)

    private lateinit var _players: Players
    private lateinit var _riotAccounts: RiotAccounts

    /**
     * Get the implicit join path to the <code>dennys.players</code> table.
     */
    fun players(): Players {
        if (!this::_players.isInitialized)
            _players = Players(this, RIOT_ACCOUNT_TO_PLAYER__RIOT_ACCOUNT_TO_PLAYER_PLAYER_ID_FKEY)

        return _players;
    }

    val players: Players
        get(): Players = players()

    /**
     * Get the implicit join path to the <code>dennys.riot_accounts</code>
     * table.
     */
    fun riotAccounts(): RiotAccounts {
        if (!this::_riotAccounts.isInitialized)
            _riotAccounts = RiotAccounts(this, RIOT_ACCOUNT_TO_PLAYER__RIOT_ACCOUNT_TO_PLAYER_RIOT_ACCOUNT_ID_FKEY)

        return _riotAccounts;
    }

    val riotAccounts: RiotAccounts
        get(): RiotAccounts = riotAccounts()
    override fun `as`(alias: String): RiotAccountToPlayer = RiotAccountToPlayer(DSL.name(alias), this)
    override fun `as`(alias: Name): RiotAccountToPlayer = RiotAccountToPlayer(alias, this)
    override fun `as`(alias: Table<*>): RiotAccountToPlayer = RiotAccountToPlayer(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): RiotAccountToPlayer = RiotAccountToPlayer(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RiotAccountToPlayer = RiotAccountToPlayer(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): RiotAccountToPlayer = RiotAccountToPlayer(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<Int?, Int?> = super.fieldsRow() as Row2<Int?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
