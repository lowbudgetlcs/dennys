/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables


import java.time.Instant

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.storage.Dennys
import org.jooq.storage.keys.EVENTS_NAME_KEY
import org.jooq.storage.keys.EVENTS_PKEY
import org.jooq.storage.keys.EVENTS__EVENTS_EVENT_GROUP_ID_FKEY
import org.jooq.storage.keys.PLAYER_TO_TEAMS__PLAYER_TO_TEAMS_EVENT_ID_FKEY
import org.jooq.storage.keys.SERIES__SERIES_EVENT_ID_FKEY
import org.jooq.storage.keys.TEAMS__TEAMS_EVENT_ID_FKEY
import org.jooq.storage.tables.EventGroups.EventGroupsPath
import org.jooq.storage.tables.PlayerToTeams.PlayerToTeamsPath
import org.jooq.storage.tables.Players.PlayersPath
import org.jooq.storage.tables.Series.SeriesPath
import org.jooq.storage.tables.Teams.TeamsPath
import org.jooq.storage.tables.records.EventsRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Events(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, EventsRecord>?,
    parentPath: InverseForeignKey<out Record, EventsRecord>?,
    aliased: Table<EventsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<EventsRecord>(
    alias,
    Dennys.DENNYS,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>dennys.events</code>
         */
        val EVENTS: Events = Events()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<EventsRecord> = EventsRecord::class.java

    /**
     * The column <code>dennys.events.id</code>.
     */
    val ID: TableField<EventsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>dennys.events.name</code>.
     */
    val NAME: TableField<EventsRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>dennys.events.description</code>.
     */
    val DESCRIPTION: TableField<EventsRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("''::text"), SQLDataType.CLOB)), this, "")

    /**
     * The column <code>dennys.events.riot_tournament_id</code>.
     */
    val RIOT_TOURNAMENT_ID: TableField<EventsRecord, Int?> = createField(DSL.name("riot_tournament_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.events.created_at</code>.
     */
    val CREATED_AT: TableField<EventsRecord, Instant?> = createField(DSL.name("created_at"), SQLDataType.INSTANT.nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.INSTANT)), this, "")

    /**
     * The column <code>dennys.events.start_date</code>.
     */
    val START_DATE: TableField<EventsRecord, Instant?> = createField(DSL.name("start_date"), SQLDataType.INSTANT.nullable(false), this, "")

    /**
     * The column <code>dennys.events.end_date</code>.
     */
    val END_DATE: TableField<EventsRecord, Instant?> = createField(DSL.name("end_date"), SQLDataType.INSTANT.nullable(false), this, "")

    /**
     * The column <code>dennys.events.event_group_id</code>.
     */
    val EVENT_GROUP_ID: TableField<EventsRecord, Int?> = createField(DSL.name("event_group_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.events.status</code>.
     */
    val STATUS: TableField<EventsRecord, String?> = createField(DSL.name("status"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<EventsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<EventsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<EventsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>dennys.events</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>dennys.events</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>dennys.events</code> table reference
     */
    constructor(): this(DSL.name("events"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, EventsRecord>?, parentPath: InverseForeignKey<out Record, EventsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, EVENTS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class EventsPath : Events, Path<EventsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, EventsRecord>?, parentPath: InverseForeignKey<out Record, EventsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<EventsRecord>): super(alias, aliased)
        override fun `as`(alias: String): EventsPath = EventsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): EventsPath = EventsPath(alias, this)
        override fun `as`(alias: Table<*>): EventsPath = EventsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Dennys.DENNYS
    override fun getIdentity(): Identity<EventsRecord, Int?> = super.getIdentity() as Identity<EventsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<EventsRecord> = EVENTS_PKEY
    override fun getUniqueKeys(): List<UniqueKey<EventsRecord>> = listOf(EVENTS_NAME_KEY)
    override fun getReferences(): List<ForeignKey<EventsRecord, *>> = listOf(EVENTS__EVENTS_EVENT_GROUP_ID_FKEY)

    private lateinit var _eventGroups: EventGroupsPath

    /**
     * Get the implicit join path to the <code>dennys.event_groups</code> table.
     */
    fun eventGroups(): EventGroupsPath {
        if (!this::_eventGroups.isInitialized)
            _eventGroups = EventGroupsPath(this, EVENTS__EVENTS_EVENT_GROUP_ID_FKEY, null)

        return _eventGroups;
    }

    val eventGroups: EventGroupsPath
        get(): EventGroupsPath = eventGroups()

    private lateinit var _playerToTeams: PlayerToTeamsPath

    /**
     * Get the implicit to-many join path to the
     * <code>dennys.player_to_teams</code> table
     */
    fun playerToTeams(): PlayerToTeamsPath {
        if (!this::_playerToTeams.isInitialized)
            _playerToTeams = PlayerToTeamsPath(this, null, PLAYER_TO_TEAMS__PLAYER_TO_TEAMS_EVENT_ID_FKEY.inverseKey)

        return _playerToTeams;
    }

    val playerToTeams: PlayerToTeamsPath
        get(): PlayerToTeamsPath = playerToTeams()

    private lateinit var _series: SeriesPath

    /**
     * Get the implicit to-many join path to the <code>dennys.series</code>
     * table
     */
    fun series(): SeriesPath {
        if (!this::_series.isInitialized)
            _series = SeriesPath(this, null, SERIES__SERIES_EVENT_ID_FKEY.inverseKey)

        return _series;
    }

    val series: SeriesPath
        get(): SeriesPath = series()

    private lateinit var _teams: TeamsPath

    /**
     * Get the implicit to-many join path to the <code>dennys.teams</code> table
     */
    fun teams(): TeamsPath {
        if (!this::_teams.isInitialized)
            _teams = TeamsPath(this, null, TEAMS__TEAMS_EVENT_ID_FKEY.inverseKey)

        return _teams;
    }

    val teams: TeamsPath
        get(): TeamsPath = teams()

    /**
     * Get the implicit many-to-many join path to the
     * <code>dennys.players</code> table
     */
    val players: PlayersPath
        get(): PlayersPath = playerToTeams().players()
    override fun `as`(alias: String): Events = Events(DSL.name(alias), this)
    override fun `as`(alias: Name): Events = Events(alias, this)
    override fun `as`(alias: Table<*>): Events = Events(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Events = Events(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Events = Events(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Events = Events(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Events = Events(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Events = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Events = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Events = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Events = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Events = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Events = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Events = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Events = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Events = where(DSL.notExists(select))
}
