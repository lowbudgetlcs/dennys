/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.storage.tables.Players


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayersRecord() : UpdatableRecordImpl<PlayersRecord>(Players.PLAYERS), Record4<Int?, String?, Int?, Int?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var eventId: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var teamId: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Int?, String?, Int?, Int?> = super.fieldsRow() as Row4<Int?, String?, Int?, Int?>
    override fun valuesRow(): Row4<Int?, String?, Int?, Int?> = super.valuesRow() as Row4<Int?, String?, Int?, Int?>
    override fun field1(): Field<Int?> = Players.PLAYERS.ID
    override fun field2(): Field<String?> = Players.PLAYERS.NAME
    override fun field3(): Field<Int?> = Players.PLAYERS.EVENT_ID
    override fun field4(): Field<Int?> = Players.PLAYERS.TEAM_ID
    override fun component1(): Int? = id
    override fun component2(): String? = name
    override fun component3(): Int? = eventId
    override fun component4(): Int? = teamId
    override fun value1(): Int? = id
    override fun value2(): String? = name
    override fun value3(): Int? = eventId
    override fun value4(): Int? = teamId

    override fun value1(value: Int?): PlayersRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): PlayersRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): PlayersRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Int?): PlayersRecord {
        set(3, value)
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: Int?, value4: Int?): PlayersRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised PlayersRecord
     */
    constructor(id: Int? = null, name: String? = null, eventId: Int? = null, teamId: Int? = null): this() {
        this.id = id
        this.name = name
        this.eventId = eventId
        this.teamId = teamId
        resetChangedOnNotNull()
    }
}
