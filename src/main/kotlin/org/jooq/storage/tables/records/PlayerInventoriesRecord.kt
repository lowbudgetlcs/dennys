/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.storage.tables.PlayerInventories


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerInventoriesRecord() : UpdatableRecordImpl<PlayerInventoriesRecord>(PlayerInventories.PLAYER_INVENTORIES), Record8<Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var item0Id: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var item1Id: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var item2Id: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var item3Id: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var item4Id: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open var item5Id: Int?
        set(value): Unit = set(6, value)
        get(): Int? = get(6) as Int?

    open var trinketId: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?> = super.fieldsRow() as Row8<Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?>
    override fun valuesRow(): Row8<Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?> = super.valuesRow() as Row8<Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?>
    override fun field1(): Field<Int?> = PlayerInventories.PLAYER_INVENTORIES.ID
    override fun field2(): Field<Int?> = PlayerInventories.PLAYER_INVENTORIES.ITEM0_ID
    override fun field3(): Field<Int?> = PlayerInventories.PLAYER_INVENTORIES.ITEM1_ID
    override fun field4(): Field<Int?> = PlayerInventories.PLAYER_INVENTORIES.ITEM2_ID
    override fun field5(): Field<Int?> = PlayerInventories.PLAYER_INVENTORIES.ITEM3_ID
    override fun field6(): Field<Int?> = PlayerInventories.PLAYER_INVENTORIES.ITEM4_ID
    override fun field7(): Field<Int?> = PlayerInventories.PLAYER_INVENTORIES.ITEM5_ID
    override fun field8(): Field<Int?> = PlayerInventories.PLAYER_INVENTORIES.TRINKET_ID
    override fun component1(): Int? = id
    override fun component2(): Int? = item0Id
    override fun component3(): Int? = item1Id
    override fun component4(): Int? = item2Id
    override fun component5(): Int? = item3Id
    override fun component6(): Int? = item4Id
    override fun component7(): Int? = item5Id
    override fun component8(): Int? = trinketId
    override fun value1(): Int? = id
    override fun value2(): Int? = item0Id
    override fun value3(): Int? = item1Id
    override fun value4(): Int? = item2Id
    override fun value5(): Int? = item3Id
    override fun value6(): Int? = item4Id
    override fun value7(): Int? = item5Id
    override fun value8(): Int? = trinketId

    override fun value1(value: Int?): PlayerInventoriesRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): PlayerInventoriesRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): PlayerInventoriesRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Int?): PlayerInventoriesRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Int?): PlayerInventoriesRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Int?): PlayerInventoriesRecord {
        set(5, value)
        return this
    }

    override fun value7(value: Int?): PlayerInventoriesRecord {
        set(6, value)
        return this
    }

    override fun value8(value: Int?): PlayerInventoriesRecord {
        set(7, value)
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: Int?, value5: Int?, value6: Int?, value7: Int?, value8: Int?): PlayerInventoriesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised PlayerInventoriesRecord
     */
    constructor(id: Int? = null, item0Id: Int? = null, item1Id: Int? = null, item2Id: Int? = null, item3Id: Int? = null, item4Id: Int? = null, item5Id: Int? = null, trinketId: Int? = null): this() {
        this.id = id
        this.item0Id = item0Id
        this.item1Id = item1Id
        this.item2Id = item2Id
        this.item3Id = item3Id
        this.item4Id = item4Id
        this.item5Id = item5Id
        this.trinketId = trinketId
        resetChangedOnNotNull()
    }
}
