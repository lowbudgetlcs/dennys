/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record10
import org.jooq.Row10
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.storage.tables.PlayerGameFacts


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerGameFactsRecord() : UpdatableRecordImpl<PlayerGameFactsRecord>(PlayerGameFacts.PLAYER_GAME_FACTS), Record10<Int?, Int?, Int?, String?, Int?, Int?, Int?, Int?, Int?, Int?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var riotAccountId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var side: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var shortcode: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var playerChampSelectId: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var playerInventoriesId: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open var playerCombatsId: Int?
        set(value): Unit = set(6, value)
        get(): Int? = get(6) as Int?

    open var playerVisionId: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    open var playerPingsId: Int?
        set(value): Unit = set(8, value)
        get(): Int? = get(8) as Int?

    open var playerFarmingId: Int?
        set(value): Unit = set(9, value)
        get(): Int? = get(9) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row10<Int?, Int?, Int?, String?, Int?, Int?, Int?, Int?, Int?, Int?> = super.fieldsRow() as Row10<Int?, Int?, Int?, String?, Int?, Int?, Int?, Int?, Int?, Int?>
    override fun valuesRow(): Row10<Int?, Int?, Int?, String?, Int?, Int?, Int?, Int?, Int?, Int?> = super.valuesRow() as Row10<Int?, Int?, Int?, String?, Int?, Int?, Int?, Int?, Int?, Int?>
    override fun field1(): Field<Int?> = PlayerGameFacts.PLAYER_GAME_FACTS.ID
    override fun field2(): Field<Int?> = PlayerGameFacts.PLAYER_GAME_FACTS.RIOT_ACCOUNT_ID
    override fun field3(): Field<Int?> = PlayerGameFacts.PLAYER_GAME_FACTS.SIDE
    override fun field4(): Field<String?> = PlayerGameFacts.PLAYER_GAME_FACTS.SHORTCODE
    override fun field5(): Field<Int?> = PlayerGameFacts.PLAYER_GAME_FACTS.PLAYER_CHAMP_SELECT_ID
    override fun field6(): Field<Int?> = PlayerGameFacts.PLAYER_GAME_FACTS.PLAYER_INVENTORIES_ID
    override fun field7(): Field<Int?> = PlayerGameFacts.PLAYER_GAME_FACTS.PLAYER_COMBATS_ID
    override fun field8(): Field<Int?> = PlayerGameFacts.PLAYER_GAME_FACTS.PLAYER_VISION_ID
    override fun field9(): Field<Int?> = PlayerGameFacts.PLAYER_GAME_FACTS.PLAYER_PINGS_ID
    override fun field10(): Field<Int?> = PlayerGameFacts.PLAYER_GAME_FACTS.PLAYER_FARMING_ID
    override fun component1(): Int? = id
    override fun component2(): Int? = riotAccountId
    override fun component3(): Int? = side
    override fun component4(): String? = shortcode
    override fun component5(): Int? = playerChampSelectId
    override fun component6(): Int? = playerInventoriesId
    override fun component7(): Int? = playerCombatsId
    override fun component8(): Int? = playerVisionId
    override fun component9(): Int? = playerPingsId
    override fun component10(): Int? = playerFarmingId
    override fun value1(): Int? = id
    override fun value2(): Int? = riotAccountId
    override fun value3(): Int? = side
    override fun value4(): String? = shortcode
    override fun value5(): Int? = playerChampSelectId
    override fun value6(): Int? = playerInventoriesId
    override fun value7(): Int? = playerCombatsId
    override fun value8(): Int? = playerVisionId
    override fun value9(): Int? = playerPingsId
    override fun value10(): Int? = playerFarmingId

    override fun value1(value: Int?): PlayerGameFactsRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): PlayerGameFactsRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): PlayerGameFactsRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): PlayerGameFactsRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Int?): PlayerGameFactsRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Int?): PlayerGameFactsRecord {
        set(5, value)
        return this
    }

    override fun value7(value: Int?): PlayerGameFactsRecord {
        set(6, value)
        return this
    }

    override fun value8(value: Int?): PlayerGameFactsRecord {
        set(7, value)
        return this
    }

    override fun value9(value: Int?): PlayerGameFactsRecord {
        set(8, value)
        return this
    }

    override fun value10(value: Int?): PlayerGameFactsRecord {
        set(9, value)
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: String?, value5: Int?, value6: Int?, value7: Int?, value8: Int?, value9: Int?, value10: Int?): PlayerGameFactsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        return this
    }

    /**
     * Create a detached, initialised PlayerGameFactsRecord
     */
    constructor(id: Int? = null, riotAccountId: Int? = null, side: Int? = null, shortcode: String? = null, playerChampSelectId: Int? = null, playerInventoriesId: Int? = null, playerCombatsId: Int? = null, playerVisionId: Int? = null, playerPingsId: Int? = null, playerFarmingId: Int? = null): this() {
        this.id = id
        this.riotAccountId = riotAccountId
        this.side = side
        this.shortcode = shortcode
        this.playerChampSelectId = playerChampSelectId
        this.playerInventoriesId = playerInventoriesId
        this.playerCombatsId = playerCombatsId
        this.playerVisionId = playerVisionId
        this.playerPingsId = playerPingsId
        this.playerFarmingId = playerFarmingId
        resetChangedOnNotNull()
    }
}
