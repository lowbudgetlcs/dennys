/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.storage.tables.PlayerVision


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerVisionRecord() : UpdatableRecordImpl<PlayerVisionRecord>(PlayerVision.PLAYER_VISION), Record6<Int?, Int?, Int?, Int?, Int?, Int?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var visionScore: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var pinksPurchased: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var pinksPlaced: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var wardsPlaced: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var wardsDestroyed: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Int?, Int?, Int?, Int?, Int?, Int?> = super.fieldsRow() as Row6<Int?, Int?, Int?, Int?, Int?, Int?>
    override fun valuesRow(): Row6<Int?, Int?, Int?, Int?, Int?, Int?> = super.valuesRow() as Row6<Int?, Int?, Int?, Int?, Int?, Int?>
    override fun field1(): Field<Int?> = PlayerVision.PLAYER_VISION.ID
    override fun field2(): Field<Int?> = PlayerVision.PLAYER_VISION.VISION_SCORE
    override fun field3(): Field<Int?> = PlayerVision.PLAYER_VISION.PINKS_PURCHASED
    override fun field4(): Field<Int?> = PlayerVision.PLAYER_VISION.PINKS_PLACED
    override fun field5(): Field<Int?> = PlayerVision.PLAYER_VISION.WARDS_PLACED
    override fun field6(): Field<Int?> = PlayerVision.PLAYER_VISION.WARDS_DESTROYED
    override fun component1(): Int? = id
    override fun component2(): Int? = visionScore
    override fun component3(): Int? = pinksPurchased
    override fun component4(): Int? = pinksPlaced
    override fun component5(): Int? = wardsPlaced
    override fun component6(): Int? = wardsDestroyed
    override fun value1(): Int? = id
    override fun value2(): Int? = visionScore
    override fun value3(): Int? = pinksPurchased
    override fun value4(): Int? = pinksPlaced
    override fun value5(): Int? = wardsPlaced
    override fun value6(): Int? = wardsDestroyed

    override fun value1(value: Int?): PlayerVisionRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): PlayerVisionRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): PlayerVisionRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Int?): PlayerVisionRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Int?): PlayerVisionRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Int?): PlayerVisionRecord {
        set(5, value)
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: Int?, value5: Int?, value6: Int?): PlayerVisionRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised PlayerVisionRecord
     */
    constructor(id: Int? = null, visionScore: Int? = null, pinksPurchased: Int? = null, pinksPlaced: Int? = null, wardsPlaced: Int? = null, wardsDestroyed: Int? = null): this() {
        this.id = id
        this.visionScore = visionScore
        this.pinksPurchased = pinksPurchased
        this.pinksPlaced = pinksPlaced
        this.wardsPlaced = wardsPlaced
        this.wardsDestroyed = wardsDestroyed
        resetChangedOnNotNull()
    }
}
