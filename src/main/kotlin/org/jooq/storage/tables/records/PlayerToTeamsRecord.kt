/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables.records


import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.storage.tables.PlayerToTeams


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerToTeamsRecord() : UpdatableRecordImpl<PlayerToTeamsRecord>(PlayerToTeams.PLAYER_TO_TEAMS), Record3<Int?, Int?, Int?> {

    open var playerId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var teamId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var eventId: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Int?, Int?> = super.key() as Record2<Int?, Int?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Int?, Int?, Int?> = super.fieldsRow() as Row3<Int?, Int?, Int?>
    override fun valuesRow(): Row3<Int?, Int?, Int?> = super.valuesRow() as Row3<Int?, Int?, Int?>
    override fun field1(): Field<Int?> = PlayerToTeams.PLAYER_TO_TEAMS.PLAYER_ID
    override fun field2(): Field<Int?> = PlayerToTeams.PLAYER_TO_TEAMS.TEAM_ID
    override fun field3(): Field<Int?> = PlayerToTeams.PLAYER_TO_TEAMS.EVENT_ID
    override fun component1(): Int? = playerId
    override fun component2(): Int? = teamId
    override fun component3(): Int? = eventId
    override fun value1(): Int? = playerId
    override fun value2(): Int? = teamId
    override fun value3(): Int? = eventId

    override fun value1(value: Int?): PlayerToTeamsRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): PlayerToTeamsRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): PlayerToTeamsRecord {
        set(2, value)
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?): PlayerToTeamsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised PlayerToTeamsRecord
     */
    constructor(playerId: Int? = null, teamId: Int? = null, eventId: Int? = null): this() {
        this.playerId = playerId
        this.teamId = teamId
        this.eventId = eventId
        resetChangedOnNotNull()
    }
}
