/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables.records


import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.storage.tables.SeriesParticipants


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SeriesParticipantsRecord() : UpdatableRecordImpl<SeriesParticipantsRecord>(SeriesParticipants.SERIES_PARTICIPANTS), Record2<Int?, Int?> {

    open var teamId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var seriesId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Int?, Int?> = super.key() as Record2<Int?, Int?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Int?, Int?> = super.fieldsRow() as Row2<Int?, Int?>
    override fun valuesRow(): Row2<Int?, Int?> = super.valuesRow() as Row2<Int?, Int?>
    override fun field1(): Field<Int?> = SeriesParticipants.SERIES_PARTICIPANTS.TEAM_ID
    override fun field2(): Field<Int?> = SeriesParticipants.SERIES_PARTICIPANTS.SERIES_ID
    override fun component1(): Int? = teamId
    override fun component2(): Int? = seriesId
    override fun value1(): Int? = teamId
    override fun value2(): Int? = seriesId

    override fun value1(value: Int?): SeriesParticipantsRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): SeriesParticipantsRecord {
        set(1, value)
        return this
    }

    override fun values(value1: Int?, value2: Int?): SeriesParticipantsRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised SeriesParticipantsRecord
     */
    constructor(teamId: Int? = null, seriesId: Int? = null): this() {
        this.teamId = teamId
        this.seriesId = seriesId
        resetChangedOnNotNull()
    }
}
