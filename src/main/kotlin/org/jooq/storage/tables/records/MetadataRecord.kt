/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables.records


import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.TableRecordImpl
import org.jooq.storage.tables.Metadata


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class MetadataRecord() : TableRecordImpl<MetadataRecord>(Metadata.METADATA), Record2<Int?, String?> {

    open var riotProviderId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var logoBucketName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Int?, String?> = super.fieldsRow() as Row2<Int?, String?>
    override fun valuesRow(): Row2<Int?, String?> = super.valuesRow() as Row2<Int?, String?>
    override fun field1(): Field<Int?> = Metadata.METADATA.RIOT_PROVIDER_ID
    override fun field2(): Field<String?> = Metadata.METADATA.LOGO_BUCKET_NAME
    override fun component1(): Int? = riotProviderId
    override fun component2(): String? = logoBucketName
    override fun value1(): Int? = riotProviderId
    override fun value2(): String? = logoBucketName

    override fun value1(value: Int?): MetadataRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): MetadataRecord {
        set(1, value)
        return this
    }

    override fun values(value1: Int?, value2: String?): MetadataRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised MetadataRecord
     */
    constructor(riotProviderId: Int? = null, logoBucketName: String? = null): this() {
        this.riotProviderId = riotProviderId
        this.logoBucketName = logoBucketName
        resetChangedOnNotNull()
    }
}
