/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.storage.tables.Games


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GamesRecord() : UpdatableRecordImpl<GamesRecord>(Games.GAMES), Record5<Int?, String?, Int?, Int?, Int?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var shortcode: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var blueTeamId: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var redTeamId: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var seriesId: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Int?, String?, Int?, Int?, Int?> = super.fieldsRow() as Row5<Int?, String?, Int?, Int?, Int?>
    override fun valuesRow(): Row5<Int?, String?, Int?, Int?, Int?> = super.valuesRow() as Row5<Int?, String?, Int?, Int?, Int?>
    override fun field1(): Field<Int?> = Games.GAMES.ID
    override fun field2(): Field<String?> = Games.GAMES.SHORTCODE
    override fun field3(): Field<Int?> = Games.GAMES.BLUE_TEAM_ID
    override fun field4(): Field<Int?> = Games.GAMES.RED_TEAM_ID
    override fun field5(): Field<Int?> = Games.GAMES.SERIES_ID
    override fun component1(): Int? = id
    override fun component2(): String? = shortcode
    override fun component3(): Int? = blueTeamId
    override fun component4(): Int? = redTeamId
    override fun component5(): Int? = seriesId
    override fun value1(): Int? = id
    override fun value2(): String? = shortcode
    override fun value3(): Int? = blueTeamId
    override fun value4(): Int? = redTeamId
    override fun value5(): Int? = seriesId

    override fun value1(value: Int?): GamesRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): GamesRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): GamesRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Int?): GamesRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Int?): GamesRecord {
        set(4, value)
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: Int?, value4: Int?, value5: Int?): GamesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised GamesRecord
     */
    constructor(id: Int? = null, shortcode: String? = null, blueTeamId: Int? = null, redTeamId: Int? = null, seriesId: Int? = null): this() {
        this.id = id
        this.shortcode = shortcode
        this.blueTeamId = blueTeamId
        this.redTeamId = redTeamId
        this.seriesId = seriesId
        resetChangedOnNotNull()
    }
}
