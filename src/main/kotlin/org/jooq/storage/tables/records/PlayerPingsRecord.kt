/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record10
import org.jooq.Row10
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.storage.tables.PlayerPings


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerPingsRecord() : UpdatableRecordImpl<PlayerPingsRecord>(PlayerPings.PLAYER_PINGS), Record10<Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var onMyWayCount: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var enemyMissingCount: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var assistMeCount: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var getBackCount: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var enemyVisionCount: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open var allInCount: Int?
        set(value): Unit = set(6, value)
        get(): Int? = get(6) as Int?

    open var needVisionCount: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    open var pushCount: Int?
        set(value): Unit = set(8, value)
        get(): Int? = get(8) as Int?

    open var visionClearedCount: Int?
        set(value): Unit = set(9, value)
        get(): Int? = get(9) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row10<Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?> = super.fieldsRow() as Row10<Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?>
    override fun valuesRow(): Row10<Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?> = super.valuesRow() as Row10<Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?>
    override fun field1(): Field<Int?> = PlayerPings.PLAYER_PINGS.ID
    override fun field2(): Field<Int?> = PlayerPings.PLAYER_PINGS.ON_MY_WAY_COUNT
    override fun field3(): Field<Int?> = PlayerPings.PLAYER_PINGS.ENEMY_MISSING_COUNT
    override fun field4(): Field<Int?> = PlayerPings.PLAYER_PINGS.ASSIST_ME_COUNT
    override fun field5(): Field<Int?> = PlayerPings.PLAYER_PINGS.GET_BACK_COUNT
    override fun field6(): Field<Int?> = PlayerPings.PLAYER_PINGS.ENEMY_VISION_COUNT
    override fun field7(): Field<Int?> = PlayerPings.PLAYER_PINGS.ALL_IN_COUNT
    override fun field8(): Field<Int?> = PlayerPings.PLAYER_PINGS.NEED_VISION_COUNT
    override fun field9(): Field<Int?> = PlayerPings.PLAYER_PINGS.PUSH_COUNT
    override fun field10(): Field<Int?> = PlayerPings.PLAYER_PINGS.VISION_CLEARED_COUNT
    override fun component1(): Int? = id
    override fun component2(): Int? = onMyWayCount
    override fun component3(): Int? = enemyMissingCount
    override fun component4(): Int? = assistMeCount
    override fun component5(): Int? = getBackCount
    override fun component6(): Int? = enemyVisionCount
    override fun component7(): Int? = allInCount
    override fun component8(): Int? = needVisionCount
    override fun component9(): Int? = pushCount
    override fun component10(): Int? = visionClearedCount
    override fun value1(): Int? = id
    override fun value2(): Int? = onMyWayCount
    override fun value3(): Int? = enemyMissingCount
    override fun value4(): Int? = assistMeCount
    override fun value5(): Int? = getBackCount
    override fun value6(): Int? = enemyVisionCount
    override fun value7(): Int? = allInCount
    override fun value8(): Int? = needVisionCount
    override fun value9(): Int? = pushCount
    override fun value10(): Int? = visionClearedCount

    override fun value1(value: Int?): PlayerPingsRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): PlayerPingsRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): PlayerPingsRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Int?): PlayerPingsRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Int?): PlayerPingsRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Int?): PlayerPingsRecord {
        set(5, value)
        return this
    }

    override fun value7(value: Int?): PlayerPingsRecord {
        set(6, value)
        return this
    }

    override fun value8(value: Int?): PlayerPingsRecord {
        set(7, value)
        return this
    }

    override fun value9(value: Int?): PlayerPingsRecord {
        set(8, value)
        return this
    }

    override fun value10(value: Int?): PlayerPingsRecord {
        set(9, value)
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: Int?, value5: Int?, value6: Int?, value7: Int?, value8: Int?, value9: Int?, value10: Int?): PlayerPingsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        return this
    }

    /**
     * Create a detached, initialised PlayerPingsRecord
     */
    constructor(id: Int? = null, onMyWayCount: Int? = null, enemyMissingCount: Int? = null, assistMeCount: Int? = null, getBackCount: Int? = null, enemyVisionCount: Int? = null, allInCount: Int? = null, needVisionCount: Int? = null, pushCount: Int? = null, visionClearedCount: Int? = null): this() {
        this.id = id
        this.onMyWayCount = onMyWayCount
        this.enemyMissingCount = enemyMissingCount
        this.assistMeCount = assistMeCount
        this.getBackCount = getBackCount
        this.enemyVisionCount = enemyVisionCount
        this.allInCount = allInCount
        this.needVisionCount = needVisionCount
        this.pushCount = pushCount
        this.visionClearedCount = visionClearedCount
        resetChangedOnNotNull()
    }
}
