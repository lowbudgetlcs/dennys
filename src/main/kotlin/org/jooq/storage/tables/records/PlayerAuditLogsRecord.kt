/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables.records


import java.time.Instant

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.storage.tables.PlayerAuditLogs


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerAuditLogsRecord() : UpdatableRecordImpl<PlayerAuditLogsRecord>(PlayerAuditLogs.PLAYER_AUDIT_LOGS), Record6<Int?, Instant?, Int?, String?, String?, String?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var createdAt: Instant?
        set(value): Unit = set(1, value)
        get(): Instant? = get(1) as Instant?

    open var playerId: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var action: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var message: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var origin: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Int?, Instant?, Int?, String?, String?, String?> = super.fieldsRow() as Row6<Int?, Instant?, Int?, String?, String?, String?>
    override fun valuesRow(): Row6<Int?, Instant?, Int?, String?, String?, String?> = super.valuesRow() as Row6<Int?, Instant?, Int?, String?, String?, String?>
    override fun field1(): Field<Int?> = PlayerAuditLogs.PLAYER_AUDIT_LOGS.ID
    override fun field2(): Field<Instant?> = PlayerAuditLogs.PLAYER_AUDIT_LOGS.CREATED_AT
    override fun field3(): Field<Int?> = PlayerAuditLogs.PLAYER_AUDIT_LOGS.PLAYER_ID
    override fun field4(): Field<String?> = PlayerAuditLogs.PLAYER_AUDIT_LOGS.ACTION
    override fun field5(): Field<String?> = PlayerAuditLogs.PLAYER_AUDIT_LOGS.MESSAGE
    override fun field6(): Field<String?> = PlayerAuditLogs.PLAYER_AUDIT_LOGS.ORIGIN
    override fun component1(): Int? = id
    override fun component2(): Instant? = createdAt
    override fun component3(): Int? = playerId
    override fun component4(): String? = action
    override fun component5(): String? = message
    override fun component6(): String? = origin
    override fun value1(): Int? = id
    override fun value2(): Instant? = createdAt
    override fun value3(): Int? = playerId
    override fun value4(): String? = action
    override fun value5(): String? = message
    override fun value6(): String? = origin

    override fun value1(value: Int?): PlayerAuditLogsRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Instant?): PlayerAuditLogsRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): PlayerAuditLogsRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): PlayerAuditLogsRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): PlayerAuditLogsRecord {
        set(4, value)
        return this
    }

    override fun value6(value: String?): PlayerAuditLogsRecord {
        set(5, value)
        return this
    }

    override fun values(value1: Int?, value2: Instant?, value3: Int?, value4: String?, value5: String?, value6: String?): PlayerAuditLogsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised PlayerAuditLogsRecord
     */
    constructor(id: Int? = null, createdAt: Instant? = null, playerId: Int? = null, action: String? = null, message: String? = null, origin: String? = null): this() {
        this.id = id
        this.createdAt = createdAt
        this.playerId = playerId
        this.action = action
        this.message = message
        this.origin = origin
        resetChangedOnNotNull()
    }
}
