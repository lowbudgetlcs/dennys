/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables.records


import java.time.Instant

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.storage.tables.Events


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EventsRecord() : UpdatableRecordImpl<EventsRecord>(Events.EVENTS), Record8<Int?, String?, String?, Int?, Instant?, Instant?, Instant?, String?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var description: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var riotTournamentId: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var createdAt: Instant?
        set(value): Unit = set(4, value)
        get(): Instant? = get(4) as Instant?

    open var startDate: Instant?
        set(value): Unit = set(5, value)
        get(): Instant? = get(5) as Instant?

    open var endDate: Instant?
        set(value): Unit = set(6, value)
        get(): Instant? = get(6) as Instant?

    open var status: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Int?, String?, String?, Int?, Instant?, Instant?, Instant?, String?> = super.fieldsRow() as Row8<Int?, String?, String?, Int?, Instant?, Instant?, Instant?, String?>
    override fun valuesRow(): Row8<Int?, String?, String?, Int?, Instant?, Instant?, Instant?, String?> = super.valuesRow() as Row8<Int?, String?, String?, Int?, Instant?, Instant?, Instant?, String?>
    override fun field1(): Field<Int?> = Events.EVENTS.ID
    override fun field2(): Field<String?> = Events.EVENTS.NAME
    override fun field3(): Field<String?> = Events.EVENTS.DESCRIPTION
    override fun field4(): Field<Int?> = Events.EVENTS.RIOT_TOURNAMENT_ID
    override fun field5(): Field<Instant?> = Events.EVENTS.CREATED_AT
    override fun field6(): Field<Instant?> = Events.EVENTS.START_DATE
    override fun field7(): Field<Instant?> = Events.EVENTS.END_DATE
    override fun field8(): Field<String?> = Events.EVENTS.STATUS
    override fun component1(): Int? = id
    override fun component2(): String? = name
    override fun component3(): String? = description
    override fun component4(): Int? = riotTournamentId
    override fun component5(): Instant? = createdAt
    override fun component6(): Instant? = startDate
    override fun component7(): Instant? = endDate
    override fun component8(): String? = status
    override fun value1(): Int? = id
    override fun value2(): String? = name
    override fun value3(): String? = description
    override fun value4(): Int? = riotTournamentId
    override fun value5(): Instant? = createdAt
    override fun value6(): Instant? = startDate
    override fun value7(): Instant? = endDate
    override fun value8(): String? = status

    override fun value1(value: Int?): EventsRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): EventsRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): EventsRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Int?): EventsRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Instant?): EventsRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Instant?): EventsRecord {
        set(5, value)
        return this
    }

    override fun value7(value: Instant?): EventsRecord {
        set(6, value)
        return this
    }

    override fun value8(value: String?): EventsRecord {
        set(7, value)
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: Int?, value5: Instant?, value6: Instant?, value7: Instant?, value8: String?): EventsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised EventsRecord
     */
    constructor(id: Int? = null, name: String? = null, description: String? = null, riotTournamentId: Int? = null, createdAt: Instant? = null, startDate: Instant? = null, endDate: Instant? = null, status: String? = null): this() {
        this.id = id
        this.name = name
        this.description = description
        this.riotTournamentId = riotTournamentId
        this.createdAt = createdAt
        this.startDate = startDate
        this.endDate = endDate
        this.status = status
        resetChangedOnNotNull()
    }
}
