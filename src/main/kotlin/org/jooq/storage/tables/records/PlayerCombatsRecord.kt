/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.storage.tables.PlayerCombats


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerCombatsRecord() : UpdatableRecordImpl<PlayerCombatsRecord>(PlayerCombats.PLAYER_COMBATS), Record8<Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var kills: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var deaths: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var assists: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var damageToChamps: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var healingOnAllies: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open var damageTakenFromChamps: Int?
        set(value): Unit = set(6, value)
        get(): Int? = get(6) as Int?

    open var teamKills: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?> = super.fieldsRow() as Row8<Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?>
    override fun valuesRow(): Row8<Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?> = super.valuesRow() as Row8<Int?, Int?, Int?, Int?, Int?, Int?, Int?, Int?>
    override fun field1(): Field<Int?> = PlayerCombats.PLAYER_COMBATS.ID
    override fun field2(): Field<Int?> = PlayerCombats.PLAYER_COMBATS.KILLS
    override fun field3(): Field<Int?> = PlayerCombats.PLAYER_COMBATS.DEATHS
    override fun field4(): Field<Int?> = PlayerCombats.PLAYER_COMBATS.ASSISTS
    override fun field5(): Field<Int?> = PlayerCombats.PLAYER_COMBATS.DAMAGE_TO_CHAMPS
    override fun field6(): Field<Int?> = PlayerCombats.PLAYER_COMBATS.HEALING_ON_ALLIES
    override fun field7(): Field<Int?> = PlayerCombats.PLAYER_COMBATS.DAMAGE_TAKEN_FROM_CHAMPS
    override fun field8(): Field<Int?> = PlayerCombats.PLAYER_COMBATS.TEAM_KILLS
    override fun component1(): Int? = id
    override fun component2(): Int? = kills
    override fun component3(): Int? = deaths
    override fun component4(): Int? = assists
    override fun component5(): Int? = damageToChamps
    override fun component6(): Int? = healingOnAllies
    override fun component7(): Int? = damageTakenFromChamps
    override fun component8(): Int? = teamKills
    override fun value1(): Int? = id
    override fun value2(): Int? = kills
    override fun value3(): Int? = deaths
    override fun value4(): Int? = assists
    override fun value5(): Int? = damageToChamps
    override fun value6(): Int? = healingOnAllies
    override fun value7(): Int? = damageTakenFromChamps
    override fun value8(): Int? = teamKills

    override fun value1(value: Int?): PlayerCombatsRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): PlayerCombatsRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): PlayerCombatsRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Int?): PlayerCombatsRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Int?): PlayerCombatsRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Int?): PlayerCombatsRecord {
        set(5, value)
        return this
    }

    override fun value7(value: Int?): PlayerCombatsRecord {
        set(6, value)
        return this
    }

    override fun value8(value: Int?): PlayerCombatsRecord {
        set(7, value)
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: Int?, value5: Int?, value6: Int?, value7: Int?, value8: Int?): PlayerCombatsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised PlayerCombatsRecord
     */
    constructor(id: Int? = null, kills: Int? = null, deaths: Int? = null, assists: Int? = null, damageToChamps: Int? = null, healingOnAllies: Int? = null, damageTakenFromChamps: Int? = null, teamKills: Int? = null): this() {
        this.id = id
        this.kills = kills
        this.deaths = deaths
        this.assists = assists
        this.damageToChamps = damageToChamps
        this.healingOnAllies = healingOnAllies
        this.damageTakenFromChamps = damageTakenFromChamps
        this.teamKills = teamKills
        resetChangedOnNotNull()
    }
}
