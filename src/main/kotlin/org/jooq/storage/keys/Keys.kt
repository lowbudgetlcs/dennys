/*
 * This file is generated by jOOQ.
 */
package org.jooq.storage.keys


import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.storage.tables.EventGroups
import org.jooq.storage.tables.Events
import org.jooq.storage.tables.GameResults
import org.jooq.storage.tables.Games
import org.jooq.storage.tables.PlayerChampSelects
import org.jooq.storage.tables.PlayerCombats
import org.jooq.storage.tables.PlayerFarming
import org.jooq.storage.tables.PlayerGameFacts
import org.jooq.storage.tables.PlayerInventories
import org.jooq.storage.tables.PlayerPings
import org.jooq.storage.tables.PlayerVision
import org.jooq.storage.tables.Players
import org.jooq.storage.tables.PlayersToEvent
import org.jooq.storage.tables.PlayersToTeam
import org.jooq.storage.tables.RiotAccounts
import org.jooq.storage.tables.Series
import org.jooq.storage.tables.SeriesResults
import org.jooq.storage.tables.TeamToSeries
import org.jooq.storage.tables.Teams
import org.jooq.storage.tables.records.EventGroupsRecord
import org.jooq.storage.tables.records.EventsRecord
import org.jooq.storage.tables.records.GameResultsRecord
import org.jooq.storage.tables.records.GamesRecord
import org.jooq.storage.tables.records.PlayerChampSelectsRecord
import org.jooq.storage.tables.records.PlayerCombatsRecord
import org.jooq.storage.tables.records.PlayerFarmingRecord
import org.jooq.storage.tables.records.PlayerGameFactsRecord
import org.jooq.storage.tables.records.PlayerInventoriesRecord
import org.jooq.storage.tables.records.PlayerPingsRecord
import org.jooq.storage.tables.records.PlayerVisionRecord
import org.jooq.storage.tables.records.PlayersRecord
import org.jooq.storage.tables.records.PlayersToEventRecord
import org.jooq.storage.tables.records.PlayersToTeamRecord
import org.jooq.storage.tables.records.RiotAccountsRecord
import org.jooq.storage.tables.records.SeriesRecord
import org.jooq.storage.tables.records.SeriesResultsRecord
import org.jooq.storage.tables.records.TeamToSeriesRecord
import org.jooq.storage.tables.records.TeamsRecord



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val EVENT_GROUPS_PKEY: UniqueKey<EventGroupsRecord> = Internal.createUniqueKey(EventGroups.EVENT_GROUPS, DSL.name("event_groups_pkey"), arrayOf(EventGroups.EVENT_GROUPS.ID), true)
val EVENTS_PKEY: UniqueKey<EventsRecord> = Internal.createUniqueKey(Events.EVENTS, DSL.name("events_pkey"), arrayOf(Events.EVENTS.ID), true)
val GAME_RESULTS_PKEY: UniqueKey<GameResultsRecord> = Internal.createUniqueKey(GameResults.GAME_RESULTS, DSL.name("game_results_pkey"), arrayOf(GameResults.GAME_RESULTS.GAME_ID), true)
val GAMES_PKEY: UniqueKey<GamesRecord> = Internal.createUniqueKey(Games.GAMES, DSL.name("games_pkey"), arrayOf(Games.GAMES.ID), true)
val PLAYER_CHAMP_SELECTS_PKEY: UniqueKey<PlayerChampSelectsRecord> = Internal.createUniqueKey(PlayerChampSelects.PLAYER_CHAMP_SELECTS, DSL.name("player_champ_selects_pkey"), arrayOf(PlayerChampSelects.PLAYER_CHAMP_SELECTS.ID), true)
val PLAYER_COMBATS_PKEY: UniqueKey<PlayerCombatsRecord> = Internal.createUniqueKey(PlayerCombats.PLAYER_COMBATS, DSL.name("player_combats_pkey"), arrayOf(PlayerCombats.PLAYER_COMBATS.ID), true)
val PLAYER_FARMING_PKEY: UniqueKey<PlayerFarmingRecord> = Internal.createUniqueKey(PlayerFarming.PLAYER_FARMING, DSL.name("player_farming_pkey"), arrayOf(PlayerFarming.PLAYER_FARMING.ID), true)
val PLAYER_GAME_FACTS_PKEY: UniqueKey<PlayerGameFactsRecord> = Internal.createUniqueKey(PlayerGameFacts.PLAYER_GAME_FACTS, DSL.name("player_game_facts_pkey"), arrayOf(PlayerGameFacts.PLAYER_GAME_FACTS.ID), true)
val PLAYER_INVENTORIES_PKEY: UniqueKey<PlayerInventoriesRecord> = Internal.createUniqueKey(PlayerInventories.PLAYER_INVENTORIES, DSL.name("player_inventories_pkey"), arrayOf(PlayerInventories.PLAYER_INVENTORIES.ID), true)
val PLAYER_PINGS_PKEY: UniqueKey<PlayerPingsRecord> = Internal.createUniqueKey(PlayerPings.PLAYER_PINGS, DSL.name("player_pings_pkey"), arrayOf(PlayerPings.PLAYER_PINGS.ID), true)
val PLAYER_VISION_PKEY: UniqueKey<PlayerVisionRecord> = Internal.createUniqueKey(PlayerVision.PLAYER_VISION, DSL.name("player_vision_pkey"), arrayOf(PlayerVision.PLAYER_VISION.ID), true)
val PLAYERS_NAME_KEY: UniqueKey<PlayersRecord> = Internal.createUniqueKey(Players.PLAYERS, DSL.name("players_name_key"), arrayOf(Players.PLAYERS.NAME), true)
val PLAYERS_PKEY: UniqueKey<PlayersRecord> = Internal.createUniqueKey(Players.PLAYERS, DSL.name("players_pkey"), arrayOf(Players.PLAYERS.ID), true)
val PLAYERS_TO_EVENT_PKEY: UniqueKey<PlayersToEventRecord> = Internal.createUniqueKey(PlayersToEvent.PLAYERS_TO_EVENT, DSL.name("players_to_event_pkey"), arrayOf(PlayersToEvent.PLAYERS_TO_EVENT.ID), true)
val PLAYERS_TO_EVENT_UNIQUE: UniqueKey<PlayersToEventRecord> = Internal.createUniqueKey(PlayersToEvent.PLAYERS_TO_EVENT, DSL.name("players_to_event_unique"), arrayOf(PlayersToEvent.PLAYERS_TO_EVENT.PLAYER_ID, PlayersToEvent.PLAYERS_TO_EVENT.EVENT_ID), true)
val PLAYERS_TO_TEAM_PKEY: UniqueKey<PlayersToTeamRecord> = Internal.createUniqueKey(PlayersToTeam.PLAYERS_TO_TEAM, DSL.name("players_to_team_pkey"), arrayOf(PlayersToTeam.PLAYERS_TO_TEAM.ID), true)
val PLAYERS_TO_TEAM_UNIQUE: UniqueKey<PlayersToTeamRecord> = Internal.createUniqueKey(PlayersToTeam.PLAYERS_TO_TEAM, DSL.name("players_to_team_unique"), arrayOf(PlayersToTeam.PLAYERS_TO_TEAM.PLAYER_ID, PlayersToTeam.PLAYERS_TO_TEAM.TEAM_ID), true)
val RIOT_ACCOUNTS_PKEY: UniqueKey<RiotAccountsRecord> = Internal.createUniqueKey(RiotAccounts.RIOT_ACCOUNTS, DSL.name("riot_accounts_pkey"), arrayOf(RiotAccounts.RIOT_ACCOUNTS.ID), true)
val RIOT_ACCOUNTS_RIOT_PUUID_KEY: UniqueKey<RiotAccountsRecord> = Internal.createUniqueKey(RiotAccounts.RIOT_ACCOUNTS, DSL.name("riot_accounts_riot_puuid_key"), arrayOf(RiotAccounts.RIOT_ACCOUNTS.RIOT_PUUID), true)
val SERIES_PKEY: UniqueKey<SeriesRecord> = Internal.createUniqueKey(Series.SERIES, DSL.name("series_pkey"), arrayOf(Series.SERIES.ID), true)
val SERIES_RESULTS_PKEY: UniqueKey<SeriesResultsRecord> = Internal.createUniqueKey(SeriesResults.SERIES_RESULTS, DSL.name("series_results_pkey"), arrayOf(SeriesResults.SERIES_RESULTS.SERIES_ID), true)
val TEAM_TO_SERIES_PKEY: UniqueKey<TeamToSeriesRecord> = Internal.createUniqueKey(TeamToSeries.TEAM_TO_SERIES, DSL.name("team_to_series_pkey"), arrayOf(TeamToSeries.TEAM_TO_SERIES.TEAM_ID, TeamToSeries.TEAM_TO_SERIES.SERIES_ID), true)
val TEAMS_NAME_EVENT_ID_KEY: UniqueKey<TeamsRecord> = Internal.createUniqueKey(Teams.TEAMS, DSL.name("teams_name_event_id_key"), arrayOf(Teams.TEAMS.NAME, Teams.TEAMS.EVENT_ID), true)
val TEAMS_PKEY: UniqueKey<TeamsRecord> = Internal.createUniqueKey(Teams.TEAMS, DSL.name("teams_pkey"), arrayOf(Teams.TEAMS.ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val EVENTS__EVENTS_EVENT_GROUP_ID_FKEY: ForeignKey<EventsRecord, EventGroupsRecord> = Internal.createForeignKey(Events.EVENTS, DSL.name("events_event_group_id_fkey"), arrayOf(Events.EVENTS.EVENT_GROUP_ID), org.jooq.storage.keys.EVENT_GROUPS_PKEY, arrayOf(EventGroups.EVENT_GROUPS.ID), true)
val GAME_RESULTS__GAME_RESULTS_GAME_ID_FKEY: ForeignKey<GameResultsRecord, GamesRecord> = Internal.createForeignKey(GameResults.GAME_RESULTS, DSL.name("game_results_game_id_fkey"), arrayOf(GameResults.GAME_RESULTS.GAME_ID), org.jooq.storage.keys.GAMES_PKEY, arrayOf(Games.GAMES.ID), true)
val GAME_RESULTS__GAME_RESULTS_LOSER_TEAM_ID_FKEY: ForeignKey<GameResultsRecord, TeamsRecord> = Internal.createForeignKey(GameResults.GAME_RESULTS, DSL.name("game_results_loser_team_id_fkey"), arrayOf(GameResults.GAME_RESULTS.LOSER_TEAM_ID), org.jooq.storage.keys.TEAMS_PKEY, arrayOf(Teams.TEAMS.ID), true)
val GAME_RESULTS__GAME_RESULTS_WINNER_TEAM_ID_FKEY: ForeignKey<GameResultsRecord, TeamsRecord> = Internal.createForeignKey(GameResults.GAME_RESULTS, DSL.name("game_results_winner_team_id_fkey"), arrayOf(GameResults.GAME_RESULTS.WINNER_TEAM_ID), org.jooq.storage.keys.TEAMS_PKEY, arrayOf(Teams.TEAMS.ID), true)
val GAMES__GAMES_BLUE_TEAM_ID_FKEY: ForeignKey<GamesRecord, TeamsRecord> = Internal.createForeignKey(Games.GAMES, DSL.name("games_blue_team_id_fkey"), arrayOf(Games.GAMES.BLUE_TEAM_ID), org.jooq.storage.keys.TEAMS_PKEY, arrayOf(Teams.TEAMS.ID), true)
val GAMES__GAMES_RED_TEAM_ID_FKEY: ForeignKey<GamesRecord, TeamsRecord> = Internal.createForeignKey(Games.GAMES, DSL.name("games_red_team_id_fkey"), arrayOf(Games.GAMES.RED_TEAM_ID), org.jooq.storage.keys.TEAMS_PKEY, arrayOf(Teams.TEAMS.ID), true)
val GAMES__GAMES_SERIES_ID_FKEY: ForeignKey<GamesRecord, SeriesRecord> = Internal.createForeignKey(Games.GAMES, DSL.name("games_series_id_fkey"), arrayOf(Games.GAMES.SERIES_ID), org.jooq.storage.keys.SERIES_PKEY, arrayOf(Series.SERIES.ID), true)
val PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_CHAMP_SELECT_ID_FKEY: ForeignKey<PlayerGameFactsRecord, PlayerChampSelectsRecord> = Internal.createForeignKey(PlayerGameFacts.PLAYER_GAME_FACTS, DSL.name("player_game_facts_player_champ_select_id_fkey"), arrayOf(PlayerGameFacts.PLAYER_GAME_FACTS.PLAYER_CHAMP_SELECT_ID), org.jooq.storage.keys.PLAYER_CHAMP_SELECTS_PKEY, arrayOf(PlayerChampSelects.PLAYER_CHAMP_SELECTS.ID), true)
val PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_COMBATS_ID_FKEY: ForeignKey<PlayerGameFactsRecord, PlayerCombatsRecord> = Internal.createForeignKey(PlayerGameFacts.PLAYER_GAME_FACTS, DSL.name("player_game_facts_player_combats_id_fkey"), arrayOf(PlayerGameFacts.PLAYER_GAME_FACTS.PLAYER_COMBATS_ID), org.jooq.storage.keys.PLAYER_COMBATS_PKEY, arrayOf(PlayerCombats.PLAYER_COMBATS.ID), true)
val PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_FARMING_ID_FKEY: ForeignKey<PlayerGameFactsRecord, PlayerFarmingRecord> = Internal.createForeignKey(PlayerGameFacts.PLAYER_GAME_FACTS, DSL.name("player_game_facts_player_farming_id_fkey"), arrayOf(PlayerGameFacts.PLAYER_GAME_FACTS.PLAYER_FARMING_ID), org.jooq.storage.keys.PLAYER_FARMING_PKEY, arrayOf(PlayerFarming.PLAYER_FARMING.ID), true)
val PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_INVENTORIES_ID_FKEY: ForeignKey<PlayerGameFactsRecord, PlayerInventoriesRecord> = Internal.createForeignKey(PlayerGameFacts.PLAYER_GAME_FACTS, DSL.name("player_game_facts_player_inventories_id_fkey"), arrayOf(PlayerGameFacts.PLAYER_GAME_FACTS.PLAYER_INVENTORIES_ID), org.jooq.storage.keys.PLAYER_INVENTORIES_PKEY, arrayOf(PlayerInventories.PLAYER_INVENTORIES.ID), true)
val PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_PINGS_ID_FKEY: ForeignKey<PlayerGameFactsRecord, PlayerPingsRecord> = Internal.createForeignKey(PlayerGameFacts.PLAYER_GAME_FACTS, DSL.name("player_game_facts_player_pings_id_fkey"), arrayOf(PlayerGameFacts.PLAYER_GAME_FACTS.PLAYER_PINGS_ID), org.jooq.storage.keys.PLAYER_PINGS_PKEY, arrayOf(PlayerPings.PLAYER_PINGS.ID), true)
val PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_VISION_ID_FKEY: ForeignKey<PlayerGameFactsRecord, PlayerVisionRecord> = Internal.createForeignKey(PlayerGameFacts.PLAYER_GAME_FACTS, DSL.name("player_game_facts_player_vision_id_fkey"), arrayOf(PlayerGameFacts.PLAYER_GAME_FACTS.PLAYER_VISION_ID), org.jooq.storage.keys.PLAYER_VISION_PKEY, arrayOf(PlayerVision.PLAYER_VISION.ID), true)
val PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_RIOT_ACCOUNT_ID_FKEY: ForeignKey<PlayerGameFactsRecord, RiotAccountsRecord> = Internal.createForeignKey(PlayerGameFacts.PLAYER_GAME_FACTS, DSL.name("player_game_facts_riot_account_id_fkey"), arrayOf(PlayerGameFacts.PLAYER_GAME_FACTS.RIOT_ACCOUNT_ID), org.jooq.storage.keys.RIOT_ACCOUNTS_PKEY, arrayOf(RiotAccounts.RIOT_ACCOUNTS.ID), true)
val PLAYERS_TO_EVENT__PLAYERS_TO_EVENT_EVENT_FKEY: ForeignKey<PlayersToEventRecord, EventsRecord> = Internal.createForeignKey(PlayersToEvent.PLAYERS_TO_EVENT, DSL.name("players_to_event_event_fkey"), arrayOf(PlayersToEvent.PLAYERS_TO_EVENT.EVENT_ID), org.jooq.storage.keys.EVENTS_PKEY, arrayOf(Events.EVENTS.ID), true)
val PLAYERS_TO_EVENT__PLAYERS_TO_EVENT_PLAYER_FKEY: ForeignKey<PlayersToEventRecord, PlayersRecord> = Internal.createForeignKey(PlayersToEvent.PLAYERS_TO_EVENT, DSL.name("players_to_event_player_fkey"), arrayOf(PlayersToEvent.PLAYERS_TO_EVENT.PLAYER_ID), org.jooq.storage.keys.PLAYERS_PKEY, arrayOf(Players.PLAYERS.ID), true)
val PLAYERS_TO_TEAM__PLAYERS_TO_TEAM_PLAYER_FKEY: ForeignKey<PlayersToTeamRecord, PlayersRecord> = Internal.createForeignKey(PlayersToTeam.PLAYERS_TO_TEAM, DSL.name("players_to_team_player_fkey"), arrayOf(PlayersToTeam.PLAYERS_TO_TEAM.PLAYER_ID), org.jooq.storage.keys.PLAYERS_PKEY, arrayOf(Players.PLAYERS.ID), true)
val PLAYERS_TO_TEAM__PLAYERS_TO_TEAM_TEAM_FKEY: ForeignKey<PlayersToTeamRecord, TeamsRecord> = Internal.createForeignKey(PlayersToTeam.PLAYERS_TO_TEAM, DSL.name("players_to_team_team_fkey"), arrayOf(PlayersToTeam.PLAYERS_TO_TEAM.TEAM_ID), org.jooq.storage.keys.TEAMS_PKEY, arrayOf(Teams.TEAMS.ID), true)
val RIOT_ACCOUNTS__RIOT_ACCOUNTS_PLAYER_ID_FKEY: ForeignKey<RiotAccountsRecord, PlayersRecord> = Internal.createForeignKey(RiotAccounts.RIOT_ACCOUNTS, DSL.name("riot_accounts_player_id_fkey"), arrayOf(RiotAccounts.RIOT_ACCOUNTS.PLAYER_ID), org.jooq.storage.keys.PLAYERS_PKEY, arrayOf(Players.PLAYERS.ID), true)
val SERIES__SERIES_EVENT_ID_FKEY: ForeignKey<SeriesRecord, EventsRecord> = Internal.createForeignKey(Series.SERIES, DSL.name("series_event_id_fkey"), arrayOf(Series.SERIES.EVENT_ID), org.jooq.storage.keys.EVENTS_PKEY, arrayOf(Events.EVENTS.ID), true)
val SERIES_RESULTS__SERIES_RESULTS_LOSER_TEAM_ID_FKEY: ForeignKey<SeriesResultsRecord, TeamsRecord> = Internal.createForeignKey(SeriesResults.SERIES_RESULTS, DSL.name("series_results_loser_team_id_fkey"), arrayOf(SeriesResults.SERIES_RESULTS.LOSER_TEAM_ID), org.jooq.storage.keys.TEAMS_PKEY, arrayOf(Teams.TEAMS.ID), true)
val SERIES_RESULTS__SERIES_RESULTS_SERIES_ID_FKEY: ForeignKey<SeriesResultsRecord, SeriesRecord> = Internal.createForeignKey(SeriesResults.SERIES_RESULTS, DSL.name("series_results_series_id_fkey"), arrayOf(SeriesResults.SERIES_RESULTS.SERIES_ID), org.jooq.storage.keys.SERIES_PKEY, arrayOf(Series.SERIES.ID), true)
val SERIES_RESULTS__SERIES_RESULTS_WINNER_TEAM_ID_FKEY: ForeignKey<SeriesResultsRecord, TeamsRecord> = Internal.createForeignKey(SeriesResults.SERIES_RESULTS, DSL.name("series_results_winner_team_id_fkey"), arrayOf(SeriesResults.SERIES_RESULTS.WINNER_TEAM_ID), org.jooq.storage.keys.TEAMS_PKEY, arrayOf(Teams.TEAMS.ID), true)
val TEAM_TO_SERIES__TEAM_TO_SERIES_SERIES_ID_FKEY: ForeignKey<TeamToSeriesRecord, SeriesRecord> = Internal.createForeignKey(TeamToSeries.TEAM_TO_SERIES, DSL.name("team_to_series_series_id_fkey"), arrayOf(TeamToSeries.TEAM_TO_SERIES.SERIES_ID), org.jooq.storage.keys.SERIES_PKEY, arrayOf(Series.SERIES.ID), true)
val TEAM_TO_SERIES__TEAM_TO_SERIES_TEAM_ID_FKEY: ForeignKey<TeamToSeriesRecord, TeamsRecord> = Internal.createForeignKey(TeamToSeries.TEAM_TO_SERIES, DSL.name("team_to_series_team_id_fkey"), arrayOf(TeamToSeries.TEAM_TO_SERIES.TEAM_ID), org.jooq.storage.keys.TEAMS_PKEY, arrayOf(Teams.TEAMS.ID), true)
val TEAMS__TEAMS_EVENT_ID_FKEY: ForeignKey<TeamsRecord, EventsRecord> = Internal.createForeignKey(Teams.TEAMS, DSL.name("teams_event_id_fkey"), arrayOf(Teams.TEAMS.EVENT_ID), org.jooq.storage.keys.EVENTS_PKEY, arrayOf(Events.EVENTS.ID), true)
