/*
 * This file is generated by jOOQ.
 */
package lblcs.keys


import lblcs.tables.EventAuditLog
import lblcs.tables.Events
import lblcs.tables.Games
import lblcs.tables.GamesResults
import lblcs.tables.PlayerAuditLogs
import lblcs.tables.PlayerChampSelects
import lblcs.tables.PlayerCombats
import lblcs.tables.PlayerFarming
import lblcs.tables.PlayerGameFacts
import lblcs.tables.PlayerInventories
import lblcs.tables.PlayerPings
import lblcs.tables.PlayerToTeams
import lblcs.tables.PlayerVision
import lblcs.tables.Players
import lblcs.tables.RiotAccountToPlayer
import lblcs.tables.RiotAccounts
import lblcs.tables.RiotAccountsAuditLogs
import lblcs.tables.Series
import lblcs.tables.SeriesParticipants
import lblcs.tables.SeriesResults
import lblcs.tables.TeamAuditLogs
import lblcs.tables.Teams
import lblcs.tables.records.EventAuditLogRecord
import lblcs.tables.records.EventsRecord
import lblcs.tables.records.GamesRecord
import lblcs.tables.records.GamesResultsRecord
import lblcs.tables.records.PlayerAuditLogsRecord
import lblcs.tables.records.PlayerChampSelectsRecord
import lblcs.tables.records.PlayerCombatsRecord
import lblcs.tables.records.PlayerFarmingRecord
import lblcs.tables.records.PlayerGameFactsRecord
import lblcs.tables.records.PlayerInventoriesRecord
import lblcs.tables.records.PlayerPingsRecord
import lblcs.tables.records.PlayerToTeamsRecord
import lblcs.tables.records.PlayerVisionRecord
import lblcs.tables.records.PlayersRecord
import lblcs.tables.records.RiotAccountToPlayerRecord
import lblcs.tables.records.RiotAccountsAuditLogsRecord
import lblcs.tables.records.RiotAccountsRecord
import lblcs.tables.records.SeriesParticipantsRecord
import lblcs.tables.records.SeriesRecord
import lblcs.tables.records.SeriesResultsRecord
import lblcs.tables.records.TeamAuditLogsRecord
import lblcs.tables.records.TeamsRecord

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val EVENT_AUDIT_LOG_PKEY: UniqueKey<EventAuditLogRecord> = Internal.createUniqueKey(EventAuditLog.EVENT_AUDIT_LOG, DSL.name("event_audit_log_pkey"), arrayOf(EventAuditLog.EVENT_AUDIT_LOG.ID), true)
val EVENTS_PKEY: UniqueKey<EventsRecord> = Internal.createUniqueKey(Events.EVENTS, DSL.name("events_pkey"), arrayOf(Events.EVENTS.ID), true)
val GAMES_PKEY: UniqueKey<GamesRecord> = Internal.createUniqueKey(Games.GAMES, DSL.name("games_pkey"), arrayOf(Games.GAMES.ID), true)
val GAMES_RESULTS_PKEY: UniqueKey<GamesResultsRecord> = Internal.createUniqueKey(GamesResults.GAMES_RESULTS, DSL.name("games_results_pkey"), arrayOf(GamesResults.GAMES_RESULTS.GAME_ID), true)
val PLAYER_AUDIT_LOGS_PKEY: UniqueKey<PlayerAuditLogsRecord> = Internal.createUniqueKey(PlayerAuditLogs.PLAYER_AUDIT_LOGS, DSL.name("player_audit_logs_pkey"), arrayOf(PlayerAuditLogs.PLAYER_AUDIT_LOGS.ID), true)
val PLAYER_CHAMP_SELECTS_PKEY: UniqueKey<PlayerChampSelectsRecord> = Internal.createUniqueKey(PlayerChampSelects.PLAYER_CHAMP_SELECTS, DSL.name("player_champ_selects_pkey"), arrayOf(PlayerChampSelects.PLAYER_CHAMP_SELECTS.ID), true)
val PLAYER_COMBATS_PKEY: UniqueKey<PlayerCombatsRecord> = Internal.createUniqueKey(PlayerCombats.PLAYER_COMBATS, DSL.name("player_combats_pkey"), arrayOf(PlayerCombats.PLAYER_COMBATS.ID), true)
val PLAYER_FARMING_PKEY: UniqueKey<PlayerFarmingRecord> = Internal.createUniqueKey(PlayerFarming.PLAYER_FARMING, DSL.name("player_farming_pkey"), arrayOf(PlayerFarming.PLAYER_FARMING.ID), true)
val PLAYER_GAME_FACTS_PKEY: UniqueKey<PlayerGameFactsRecord> = Internal.createUniqueKey(PlayerGameFacts.PLAYER_GAME_FACTS, DSL.name("player_game_facts_pkey"), arrayOf(PlayerGameFacts.PLAYER_GAME_FACTS.ID), true)
val PLAYER_INVENTORIES_PKEY: UniqueKey<PlayerInventoriesRecord> = Internal.createUniqueKey(PlayerInventories.PLAYER_INVENTORIES, DSL.name("player_inventories_pkey"), arrayOf(PlayerInventories.PLAYER_INVENTORIES.ID), true)
val PLAYER_PINGS_PKEY: UniqueKey<PlayerPingsRecord> = Internal.createUniqueKey(PlayerPings.PLAYER_PINGS, DSL.name("player_pings_pkey"), arrayOf(PlayerPings.PLAYER_PINGS.ID), true)
val PLAYER_TO_TEAMS_PKEY: UniqueKey<PlayerToTeamsRecord> = Internal.createUniqueKey(PlayerToTeams.PLAYER_TO_TEAMS, DSL.name("player_to_teams_pkey"), arrayOf(PlayerToTeams.PLAYER_TO_TEAMS.PLAYER_ID, PlayerToTeams.PLAYER_TO_TEAMS.EVENT_ID), true)
val PLAYER_VISION_PKEY: UniqueKey<PlayerVisionRecord> = Internal.createUniqueKey(PlayerVision.PLAYER_VISION, DSL.name("player_vision_pkey"), arrayOf(PlayerVision.PLAYER_VISION.ID), true)
val PLAYERS_NAME_KEY: UniqueKey<PlayersRecord> = Internal.createUniqueKey(Players.PLAYERS, DSL.name("players_name_key"), arrayOf(Players.PLAYERS.NAME), true)
val PLAYERS_PKEY: UniqueKey<PlayersRecord> = Internal.createUniqueKey(Players.PLAYERS, DSL.name("players_pkey"), arrayOf(Players.PLAYERS.ID), true)
val RIOT_ACCOUNT_TO_PLAYER_PKEY: UniqueKey<RiotAccountToPlayerRecord> = Internal.createUniqueKey(RiotAccountToPlayer.RIOT_ACCOUNT_TO_PLAYER, DSL.name("riot_account_to_player_pkey"), arrayOf(RiotAccountToPlayer.RIOT_ACCOUNT_TO_PLAYER.PLAYER_ID, RiotAccountToPlayer.RIOT_ACCOUNT_TO_PLAYER.RIOT_ACCOUNT_ID), true)
val RIOT_ACCOUNTS_PKEY: UniqueKey<RiotAccountsRecord> = Internal.createUniqueKey(RiotAccounts.RIOT_ACCOUNTS, DSL.name("riot_accounts_pkey"), arrayOf(RiotAccounts.RIOT_ACCOUNTS.ID), true)
val RIOT_ACCOUNTS_RIOT_PUUID_KEY: UniqueKey<RiotAccountsRecord> = Internal.createUniqueKey(RiotAccounts.RIOT_ACCOUNTS, DSL.name("riot_accounts_riot_puuid_key"), arrayOf(RiotAccounts.RIOT_ACCOUNTS.RIOT_PUUID), true)
val RIOT_ACCOUNTS_AUDIT_LOGS_PKEY: UniqueKey<RiotAccountsAuditLogsRecord> = Internal.createUniqueKey(RiotAccountsAuditLogs.RIOT_ACCOUNTS_AUDIT_LOGS, DSL.name("riot_accounts_audit_logs_pkey"), arrayOf(RiotAccountsAuditLogs.RIOT_ACCOUNTS_AUDIT_LOGS.ID), true)
val SERIES_PKEY: UniqueKey<SeriesRecord> = Internal.createUniqueKey(Series.SERIES, DSL.name("series_pkey"), arrayOf(Series.SERIES.ID), true)
val SERIES_PARTICIPANTS_PKEY: UniqueKey<SeriesParticipantsRecord> = Internal.createUniqueKey(SeriesParticipants.SERIES_PARTICIPANTS, DSL.name("series_participants_pkey"), arrayOf(SeriesParticipants.SERIES_PARTICIPANTS.TEAM_ID, SeriesParticipants.SERIES_PARTICIPANTS.SERIES_ID), true)
val SERIES_RESULTS_PKEY: UniqueKey<SeriesResultsRecord> = Internal.createUniqueKey(SeriesResults.SERIES_RESULTS, DSL.name("series_results_pkey"), arrayOf(SeriesResults.SERIES_RESULTS.SERIES_ID), true)
val TEAM_AUDIT_LOGS_PKEY: UniqueKey<TeamAuditLogsRecord> = Internal.createUniqueKey(TeamAuditLogs.TEAM_AUDIT_LOGS, DSL.name("team_audit_logs_pkey"), arrayOf(TeamAuditLogs.TEAM_AUDIT_LOGS.ID), true)
val TEAMS_PKEY: UniqueKey<TeamsRecord> = Internal.createUniqueKey(Teams.TEAMS, DSL.name("teams_pkey"), arrayOf(Teams.TEAMS.ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val EVENT_AUDIT_LOG__EVENT_AUDIT_LOG_EVENT_ID_FKEY: ForeignKey<EventAuditLogRecord, EventsRecord> = Internal.createForeignKey(EventAuditLog.EVENT_AUDIT_LOG, DSL.name("event_audit_log_event_id_fkey"), arrayOf(EventAuditLog.EVENT_AUDIT_LOG.EVENT_ID), lblcs.keys.EVENTS_PKEY, arrayOf(Events.EVENTS.ID), true)
val GAMES__GAMES_BLUE_TEAM_FKEY: ForeignKey<GamesRecord, TeamsRecord> = Internal.createForeignKey(Games.GAMES, DSL.name("games_blue_team_fkey"), arrayOf(Games.GAMES.BLUE_TEAM), lblcs.keys.TEAMS_PKEY, arrayOf(Teams.TEAMS.ID), true)
val GAMES__GAMES_RED_TEAM_FKEY: ForeignKey<GamesRecord, TeamsRecord> = Internal.createForeignKey(Games.GAMES, DSL.name("games_red_team_fkey"), arrayOf(Games.GAMES.RED_TEAM), lblcs.keys.TEAMS_PKEY, arrayOf(Teams.TEAMS.ID), true)
val GAMES__GAMES_SERIES_ID_FKEY: ForeignKey<GamesRecord, SeriesRecord> = Internal.createForeignKey(Games.GAMES, DSL.name("games_series_id_fkey"), arrayOf(Games.GAMES.SERIES_ID), lblcs.keys.SERIES_PKEY, arrayOf(Series.SERIES.ID), true)
val GAMES_RESULTS__GAMES_RESULTS_GAME_ID_FKEY: ForeignKey<GamesResultsRecord, GamesRecord> = Internal.createForeignKey(GamesResults.GAMES_RESULTS, DSL.name("games_results_game_id_fkey"), arrayOf(GamesResults.GAMES_RESULTS.GAME_ID), lblcs.keys.GAMES_PKEY, arrayOf(Games.GAMES.ID), true)
val GAMES_RESULTS__GAMES_RESULTS_LOSER_FKEY: ForeignKey<GamesResultsRecord, TeamsRecord> = Internal.createForeignKey(GamesResults.GAMES_RESULTS, DSL.name("games_results_loser_fkey"), arrayOf(GamesResults.GAMES_RESULTS.LOSER), lblcs.keys.TEAMS_PKEY, arrayOf(Teams.TEAMS.ID), true)
val GAMES_RESULTS__GAMES_RESULTS_WINNER_FKEY: ForeignKey<GamesResultsRecord, TeamsRecord> = Internal.createForeignKey(GamesResults.GAMES_RESULTS, DSL.name("games_results_winner_fkey"), arrayOf(GamesResults.GAMES_RESULTS.WINNER), lblcs.keys.TEAMS_PKEY, arrayOf(Teams.TEAMS.ID), true)
val PLAYER_AUDIT_LOGS__PLAYER_AUDIT_LOGS_PLAYER_ID_FKEY: ForeignKey<PlayerAuditLogsRecord, PlayersRecord> = Internal.createForeignKey(PlayerAuditLogs.PLAYER_AUDIT_LOGS, DSL.name("player_audit_logs_player_id_fkey"), arrayOf(PlayerAuditLogs.PLAYER_AUDIT_LOGS.PLAYER_ID), lblcs.keys.PLAYERS_PKEY, arrayOf(Players.PLAYERS.ID), true)
val PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_CHAMP_SELECT_ID_FKEY: ForeignKey<PlayerGameFactsRecord, PlayerChampSelectsRecord> = Internal.createForeignKey(PlayerGameFacts.PLAYER_GAME_FACTS, DSL.name("player_game_facts_player_champ_select_id_fkey"), arrayOf(PlayerGameFacts.PLAYER_GAME_FACTS.PLAYER_CHAMP_SELECT_ID), lblcs.keys.PLAYER_CHAMP_SELECTS_PKEY, arrayOf(PlayerChampSelects.PLAYER_CHAMP_SELECTS.ID), true)
val PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_COMBATS_ID_FKEY: ForeignKey<PlayerGameFactsRecord, PlayerCombatsRecord> = Internal.createForeignKey(PlayerGameFacts.PLAYER_GAME_FACTS, DSL.name("player_game_facts_player_combats_id_fkey"), arrayOf(PlayerGameFacts.PLAYER_GAME_FACTS.PLAYER_COMBATS_ID), lblcs.keys.PLAYER_COMBATS_PKEY, arrayOf(PlayerCombats.PLAYER_COMBATS.ID), true)
val PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_FARMING_ID_FKEY: ForeignKey<PlayerGameFactsRecord, PlayerFarmingRecord> = Internal.createForeignKey(PlayerGameFacts.PLAYER_GAME_FACTS, DSL.name("player_game_facts_player_farming_id_fkey"), arrayOf(PlayerGameFacts.PLAYER_GAME_FACTS.PLAYER_FARMING_ID), lblcs.keys.PLAYER_FARMING_PKEY, arrayOf(PlayerFarming.PLAYER_FARMING.ID), true)
val PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_INVENTORIES_ID_FKEY: ForeignKey<PlayerGameFactsRecord, PlayerInventoriesRecord> = Internal.createForeignKey(PlayerGameFacts.PLAYER_GAME_FACTS, DSL.name("player_game_facts_player_inventories_id_fkey"), arrayOf(PlayerGameFacts.PLAYER_GAME_FACTS.PLAYER_INVENTORIES_ID), lblcs.keys.PLAYER_INVENTORIES_PKEY, arrayOf(PlayerInventories.PLAYER_INVENTORIES.ID), true)
val PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_PINGS_ID_FKEY: ForeignKey<PlayerGameFactsRecord, PlayerPingsRecord> = Internal.createForeignKey(PlayerGameFacts.PLAYER_GAME_FACTS, DSL.name("player_game_facts_player_pings_id_fkey"), arrayOf(PlayerGameFacts.PLAYER_GAME_FACTS.PLAYER_PINGS_ID), lblcs.keys.PLAYER_PINGS_PKEY, arrayOf(PlayerPings.PLAYER_PINGS.ID), true)
val PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_VISION_ID_FKEY: ForeignKey<PlayerGameFactsRecord, PlayerVisionRecord> = Internal.createForeignKey(PlayerGameFacts.PLAYER_GAME_FACTS, DSL.name("player_game_facts_player_vision_id_fkey"), arrayOf(PlayerGameFacts.PLAYER_GAME_FACTS.PLAYER_VISION_ID), lblcs.keys.PLAYER_VISION_PKEY, arrayOf(PlayerVision.PLAYER_VISION.ID), true)
val PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_RIOT_ACCOUNT_ID_FKEY: ForeignKey<PlayerGameFactsRecord, RiotAccountsRecord> = Internal.createForeignKey(PlayerGameFacts.PLAYER_GAME_FACTS, DSL.name("player_game_facts_riot_account_id_fkey"), arrayOf(PlayerGameFacts.PLAYER_GAME_FACTS.RIOT_ACCOUNT_ID), lblcs.keys.RIOT_ACCOUNTS_PKEY, arrayOf(RiotAccounts.RIOT_ACCOUNTS.ID), true)
val PLAYER_TO_TEAMS__PLAYER_TO_TEAMS_EVENT_ID_FKEY: ForeignKey<PlayerToTeamsRecord, EventsRecord> = Internal.createForeignKey(PlayerToTeams.PLAYER_TO_TEAMS, DSL.name("player_to_teams_event_id_fkey"), arrayOf(PlayerToTeams.PLAYER_TO_TEAMS.EVENT_ID), lblcs.keys.EVENTS_PKEY, arrayOf(Events.EVENTS.ID), true)
val PLAYER_TO_TEAMS__PLAYER_TO_TEAMS_PLAYER_ID_FKEY: ForeignKey<PlayerToTeamsRecord, PlayersRecord> = Internal.createForeignKey(PlayerToTeams.PLAYER_TO_TEAMS, DSL.name("player_to_teams_player_id_fkey"), arrayOf(PlayerToTeams.PLAYER_TO_TEAMS.PLAYER_ID), lblcs.keys.PLAYERS_PKEY, arrayOf(Players.PLAYERS.ID), true)
val PLAYER_TO_TEAMS__PLAYER_TO_TEAMS_TEAM_ID_FKEY: ForeignKey<PlayerToTeamsRecord, TeamsRecord> = Internal.createForeignKey(PlayerToTeams.PLAYER_TO_TEAMS, DSL.name("player_to_teams_team_id_fkey"), arrayOf(PlayerToTeams.PLAYER_TO_TEAMS.TEAM_ID), lblcs.keys.TEAMS_PKEY, arrayOf(Teams.TEAMS.ID), true)
val PLAYERS__PLAYERS_EVENT_ID_FKEY: ForeignKey<PlayersRecord, EventsRecord> = Internal.createForeignKey(Players.PLAYERS, DSL.name("players_event_id_fkey"), arrayOf(Players.PLAYERS.EVENT_ID), lblcs.keys.EVENTS_PKEY, arrayOf(Events.EVENTS.ID), true)
val PLAYERS__PLAYERS_TEAM_ID_FKEY: ForeignKey<PlayersRecord, TeamsRecord> = Internal.createForeignKey(Players.PLAYERS, DSL.name("players_team_id_fkey"), arrayOf(Players.PLAYERS.TEAM_ID), lblcs.keys.TEAMS_PKEY, arrayOf(Teams.TEAMS.ID), true)
val RIOT_ACCOUNT_TO_PLAYER__RIOT_ACCOUNT_TO_PLAYER_PLAYER_ID_FKEY: ForeignKey<RiotAccountToPlayerRecord, PlayersRecord> = Internal.createForeignKey(RiotAccountToPlayer.RIOT_ACCOUNT_TO_PLAYER, DSL.name("riot_account_to_player_player_id_fkey"), arrayOf(RiotAccountToPlayer.RIOT_ACCOUNT_TO_PLAYER.PLAYER_ID), lblcs.keys.PLAYERS_PKEY, arrayOf(Players.PLAYERS.ID), true)
val RIOT_ACCOUNT_TO_PLAYER__RIOT_ACCOUNT_TO_PLAYER_RIOT_ACCOUNT_ID_FKEY: ForeignKey<RiotAccountToPlayerRecord, RiotAccountsRecord> = Internal.createForeignKey(RiotAccountToPlayer.RIOT_ACCOUNT_TO_PLAYER, DSL.name("riot_account_to_player_riot_account_id_fkey"), arrayOf(RiotAccountToPlayer.RIOT_ACCOUNT_TO_PLAYER.RIOT_ACCOUNT_ID), lblcs.keys.RIOT_ACCOUNTS_PKEY, arrayOf(RiotAccounts.RIOT_ACCOUNTS.ID), true)
val RIOT_ACCOUNTS_AUDIT_LOGS__RIOT_ACCOUNTS_AUDIT_LOGS_RIOT_ACCOUNT_ID_FKEY: ForeignKey<RiotAccountsAuditLogsRecord, RiotAccountsRecord> = Internal.createForeignKey(RiotAccountsAuditLogs.RIOT_ACCOUNTS_AUDIT_LOGS, DSL.name("riot_accounts_audit_logs_riot_account_id_fkey"), arrayOf(RiotAccountsAuditLogs.RIOT_ACCOUNTS_AUDIT_LOGS.RIOT_ACCOUNT_ID), lblcs.keys.RIOT_ACCOUNTS_PKEY, arrayOf(RiotAccounts.RIOT_ACCOUNTS.ID), true)
val SERIES__SERIES_EVENT_ID_FKEY: ForeignKey<SeriesRecord, EventsRecord> = Internal.createForeignKey(Series.SERIES, DSL.name("series_event_id_fkey"), arrayOf(Series.SERIES.EVENT_ID), lblcs.keys.EVENTS_PKEY, arrayOf(Events.EVENTS.ID), true)
val SERIES_PARTICIPANTS__SERIES_PARTICIPANTS_SERIES_ID_FKEY: ForeignKey<SeriesParticipantsRecord, SeriesRecord> = Internal.createForeignKey(SeriesParticipants.SERIES_PARTICIPANTS, DSL.name("series_participants_series_id_fkey"), arrayOf(SeriesParticipants.SERIES_PARTICIPANTS.SERIES_ID), lblcs.keys.SERIES_PKEY, arrayOf(Series.SERIES.ID), true)
val SERIES_PARTICIPANTS__SERIES_PARTICIPANTS_TEAM_ID_FKEY: ForeignKey<SeriesParticipantsRecord, TeamsRecord> = Internal.createForeignKey(SeriesParticipants.SERIES_PARTICIPANTS, DSL.name("series_participants_team_id_fkey"), arrayOf(SeriesParticipants.SERIES_PARTICIPANTS.TEAM_ID), lblcs.keys.TEAMS_PKEY, arrayOf(Teams.TEAMS.ID), true)
val SERIES_RESULTS__SERIES_RESULTS_LOSER_FKEY: ForeignKey<SeriesResultsRecord, TeamsRecord> = Internal.createForeignKey(SeriesResults.SERIES_RESULTS, DSL.name("series_results_loser_fkey"), arrayOf(SeriesResults.SERIES_RESULTS.LOSER), lblcs.keys.TEAMS_PKEY, arrayOf(Teams.TEAMS.ID), true)
val SERIES_RESULTS__SERIES_RESULTS_SERIES_ID_FKEY: ForeignKey<SeriesResultsRecord, SeriesRecord> = Internal.createForeignKey(SeriesResults.SERIES_RESULTS, DSL.name("series_results_series_id_fkey"), arrayOf(SeriesResults.SERIES_RESULTS.SERIES_ID), lblcs.keys.SERIES_PKEY, arrayOf(Series.SERIES.ID), true)
val SERIES_RESULTS__SERIES_RESULTS_WINNER_FKEY: ForeignKey<SeriesResultsRecord, TeamsRecord> = Internal.createForeignKey(SeriesResults.SERIES_RESULTS, DSL.name("series_results_winner_fkey"), arrayOf(SeriesResults.SERIES_RESULTS.WINNER), lblcs.keys.TEAMS_PKEY, arrayOf(Teams.TEAMS.ID), true)
val TEAM_AUDIT_LOGS__TEAM_AUDIT_LOGS_TEAM_ID_FKEY: ForeignKey<TeamAuditLogsRecord, TeamsRecord> = Internal.createForeignKey(TeamAuditLogs.TEAM_AUDIT_LOGS, DSL.name("team_audit_logs_team_id_fkey"), arrayOf(TeamAuditLogs.TEAM_AUDIT_LOGS.TEAM_ID), lblcs.keys.TEAMS_PKEY, arrayOf(Teams.TEAMS.ID), true)
val TEAMS__TEAMS_EVENT_ID_FKEY: ForeignKey<TeamsRecord, EventsRecord> = Internal.createForeignKey(Teams.TEAMS, DSL.name("teams_event_id_fkey"), arrayOf(Teams.TEAMS.EVENT_ID), lblcs.keys.EVENTS_PKEY, arrayOf(Events.EVENTS.ID), true)
