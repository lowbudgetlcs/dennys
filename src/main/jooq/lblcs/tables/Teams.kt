/*
 * This file is generated by jOOQ.
 */
package lblcs.tables


import kotlin.collections.Collection
import kotlin.collections.List

import lblcs.Dennys
import lblcs.keys.GAMES_RESULTS__GAMES_RESULTS_LOSER_FKEY
import lblcs.keys.GAMES_RESULTS__GAMES_RESULTS_WINNER_FKEY
import lblcs.keys.GAMES__GAMES_BLUE_TEAM_FKEY
import lblcs.keys.GAMES__GAMES_RED_TEAM_FKEY
import lblcs.keys.PLAYERS__PLAYERS_TEAM_ID_FKEY
import lblcs.keys.PLAYER_TO_TEAMS__PLAYER_TO_TEAMS_TEAM_ID_FKEY
import lblcs.keys.SERIES_PARTICIPANTS__SERIES_PARTICIPANTS_TEAM_ID_FKEY
import lblcs.keys.SERIES_RESULTS__SERIES_RESULTS_LOSER_FKEY
import lblcs.keys.SERIES_RESULTS__SERIES_RESULTS_WINNER_FKEY
import lblcs.keys.TEAMS_PKEY
import lblcs.keys.TEAMS__TEAMS_EVENT_ID_FKEY
import lblcs.keys.TEAM_AUDIT_LOGS__TEAM_AUDIT_LOGS_TEAM_ID_FKEY
import lblcs.tables.Events.EventsPath
import lblcs.tables.Games.GamesPath
import lblcs.tables.GamesResults.GamesResultsPath
import lblcs.tables.PlayerToTeams.PlayerToTeamsPath
import lblcs.tables.Players.PlayersPath
import lblcs.tables.Series.SeriesPath
import lblcs.tables.SeriesParticipants.SeriesParticipantsPath
import lblcs.tables.SeriesResults.SeriesResultsPath
import lblcs.tables.TeamAuditLogs.TeamAuditLogsPath
import lblcs.tables.records.TeamsRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Teams(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, TeamsRecord>?,
    parentPath: InverseForeignKey<out Record, TeamsRecord>?,
    aliased: Table<TeamsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<TeamsRecord>(
    alias,
    Dennys.DENNYS,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>dennys.teams</code>
         */
        val TEAMS: Teams = Teams()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TeamsRecord> = TeamsRecord::class.java

    /**
     * The column <code>dennys.teams.id</code>.
     */
    val ID: TableField<TeamsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>dennys.teams.name</code>.
     */
    val NAME: TableField<TeamsRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>dennys.teams.logo_name</code>.
     */
    val LOGO_NAME: TableField<TeamsRecord, String?> = createField(DSL.name("logo_name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>dennys.teams.event_id</code>.
     */
    val EVENT_ID: TableField<TeamsRecord, Int?> = createField(DSL.name("event_id"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<TeamsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<TeamsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<TeamsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>dennys.teams</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>dennys.teams</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>dennys.teams</code> table reference
     */
    constructor(): this(DSL.name("teams"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, TeamsRecord>?, parentPath: InverseForeignKey<out Record, TeamsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, TEAMS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class TeamsPath : Teams, Path<TeamsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, TeamsRecord>?, parentPath: InverseForeignKey<out Record, TeamsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<TeamsRecord>): super(alias, aliased)
        override fun `as`(alias: String): TeamsPath = TeamsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): TeamsPath = TeamsPath(alias, this)
        override fun `as`(alias: Table<*>): TeamsPath = TeamsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Dennys.DENNYS
    override fun getIdentity(): Identity<TeamsRecord, Int?> = super.getIdentity() as Identity<TeamsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TeamsRecord> = TEAMS_PKEY
    override fun getReferences(): List<ForeignKey<TeamsRecord, *>> = listOf(TEAMS__TEAMS_EVENT_ID_FKEY)

    private lateinit var _events: EventsPath

    /**
     * Get the implicit join path to the <code>dennys.events</code> table.
     */
    fun events(): EventsPath {
        if (!this::_events.isInitialized)
            _events = EventsPath(this, TEAMS__TEAMS_EVENT_ID_FKEY, null)

        return _events;
    }

    val events: EventsPath
        get(): EventsPath = events()

    private lateinit var _gamesBlueTeamFkey: GamesPath

    /**
     * Get the implicit to-many join path to the <code>dennys.games</code>
     * table, via the <code>games_blue_team_fkey</code> key
     */
    fun gamesBlueTeamFkey(): GamesPath {
        if (!this::_gamesBlueTeamFkey.isInitialized)
            _gamesBlueTeamFkey = GamesPath(this, null, GAMES__GAMES_BLUE_TEAM_FKEY.inverseKey)

        return _gamesBlueTeamFkey;
    }

    val gamesBlueTeamFkey: GamesPath
        get(): GamesPath = gamesBlueTeamFkey()

    private lateinit var _gamesRedTeamFkey: GamesPath

    /**
     * Get the implicit to-many join path to the <code>dennys.games</code>
     * table, via the <code>games_red_team_fkey</code> key
     */
    fun gamesRedTeamFkey(): GamesPath {
        if (!this::_gamesRedTeamFkey.isInitialized)
            _gamesRedTeamFkey = GamesPath(this, null, GAMES__GAMES_RED_TEAM_FKEY.inverseKey)

        return _gamesRedTeamFkey;
    }

    val gamesRedTeamFkey: GamesPath
        get(): GamesPath = gamesRedTeamFkey()

    private lateinit var _gamesResultsLoserFkey: GamesResultsPath

    /**
     * Get the implicit to-many join path to the
     * <code>dennys.games_results</code> table, via the
     * <code>games_results_loser_fkey</code> key
     */
    fun gamesResultsLoserFkey(): GamesResultsPath {
        if (!this::_gamesResultsLoserFkey.isInitialized)
            _gamesResultsLoserFkey = GamesResultsPath(this, null, GAMES_RESULTS__GAMES_RESULTS_LOSER_FKEY.inverseKey)

        return _gamesResultsLoserFkey;
    }

    val gamesResultsLoserFkey: GamesResultsPath
        get(): GamesResultsPath = gamesResultsLoserFkey()

    private lateinit var _gamesResultsWinnerFkey: GamesResultsPath

    /**
     * Get the implicit to-many join path to the
     * <code>dennys.games_results</code> table, via the
     * <code>games_results_winner_fkey</code> key
     */
    fun gamesResultsWinnerFkey(): GamesResultsPath {
        if (!this::_gamesResultsWinnerFkey.isInitialized)
            _gamesResultsWinnerFkey = GamesResultsPath(this, null, GAMES_RESULTS__GAMES_RESULTS_WINNER_FKEY.inverseKey)

        return _gamesResultsWinnerFkey;
    }

    val gamesResultsWinnerFkey: GamesResultsPath
        get(): GamesResultsPath = gamesResultsWinnerFkey()

    private lateinit var _playerToTeams: PlayerToTeamsPath

    /**
     * Get the implicit to-many join path to the
     * <code>dennys.player_to_teams</code> table
     */
    fun playerToTeams(): PlayerToTeamsPath {
        if (!this::_playerToTeams.isInitialized)
            _playerToTeams = PlayerToTeamsPath(this, null, PLAYER_TO_TEAMS__PLAYER_TO_TEAMS_TEAM_ID_FKEY.inverseKey)

        return _playerToTeams;
    }

    val playerToTeams: PlayerToTeamsPath
        get(): PlayerToTeamsPath = playerToTeams()

    private lateinit var _players: PlayersPath

    /**
     * Get the implicit to-many join path to the <code>dennys.players</code>
     * table
     */
    fun players(): PlayersPath {
        if (!this::_players.isInitialized)
            _players = PlayersPath(this, null, PLAYERS__PLAYERS_TEAM_ID_FKEY.inverseKey)

        return _players;
    }

    val players: PlayersPath
        get(): PlayersPath = players()

    private lateinit var _seriesParticipants: SeriesParticipantsPath

    /**
     * Get the implicit to-many join path to the
     * <code>dennys.series_participants</code> table
     */
    fun seriesParticipants(): SeriesParticipantsPath {
        if (!this::_seriesParticipants.isInitialized)
            _seriesParticipants = SeriesParticipantsPath(this, null, SERIES_PARTICIPANTS__SERIES_PARTICIPANTS_TEAM_ID_FKEY.inverseKey)

        return _seriesParticipants;
    }

    val seriesParticipants: SeriesParticipantsPath
        get(): SeriesParticipantsPath = seriesParticipants()

    private lateinit var _seriesResultsLoserFkey: SeriesResultsPath

    /**
     * Get the implicit to-many join path to the
     * <code>dennys.series_results</code> table, via the
     * <code>series_results_loser_fkey</code> key
     */
    fun seriesResultsLoserFkey(): SeriesResultsPath {
        if (!this::_seriesResultsLoserFkey.isInitialized)
            _seriesResultsLoserFkey = SeriesResultsPath(this, null, SERIES_RESULTS__SERIES_RESULTS_LOSER_FKEY.inverseKey)

        return _seriesResultsLoserFkey;
    }

    val seriesResultsLoserFkey: SeriesResultsPath
        get(): SeriesResultsPath = seriesResultsLoserFkey()

    private lateinit var _seriesResultsWinnerFkey: SeriesResultsPath

    /**
     * Get the implicit to-many join path to the
     * <code>dennys.series_results</code> table, via the
     * <code>series_results_winner_fkey</code> key
     */
    fun seriesResultsWinnerFkey(): SeriesResultsPath {
        if (!this::_seriesResultsWinnerFkey.isInitialized)
            _seriesResultsWinnerFkey = SeriesResultsPath(this, null, SERIES_RESULTS__SERIES_RESULTS_WINNER_FKEY.inverseKey)

        return _seriesResultsWinnerFkey;
    }

    val seriesResultsWinnerFkey: SeriesResultsPath
        get(): SeriesResultsPath = seriesResultsWinnerFkey()

    private lateinit var _teamAuditLogs: TeamAuditLogsPath

    /**
     * Get the implicit to-many join path to the
     * <code>dennys.team_audit_logs</code> table
     */
    fun teamAuditLogs(): TeamAuditLogsPath {
        if (!this::_teamAuditLogs.isInitialized)
            _teamAuditLogs = TeamAuditLogsPath(this, null, TEAM_AUDIT_LOGS__TEAM_AUDIT_LOGS_TEAM_ID_FKEY.inverseKey)

        return _teamAuditLogs;
    }

    val teamAuditLogs: TeamAuditLogsPath
        get(): TeamAuditLogsPath = teamAuditLogs()

    /**
     * Get the implicit many-to-many join path to the <code>dennys.series</code>
     * table
     */
    val series: SeriesPath
        get(): SeriesPath = seriesParticipants().series()
    override fun `as`(alias: String): Teams = Teams(DSL.name(alias), this)
    override fun `as`(alias: Name): Teams = Teams(alias, this)
    override fun `as`(alias: Table<*>): Teams = Teams(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Teams = Teams(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Teams = Teams(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Teams = Teams(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Teams = Teams(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Teams = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Teams = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Teams = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Teams = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Teams = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Teams = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Teams = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Teams = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Teams = where(DSL.notExists(select))
}
