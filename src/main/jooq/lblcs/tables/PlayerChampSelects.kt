/*
 * This file is generated by jOOQ.
 */
package lblcs.tables


import kotlin.collections.Collection

import lblcs.Dennys
import lblcs.keys.PLAYER_CHAMP_SELECTS_PKEY
import lblcs.keys.PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_CHAMP_SELECT_ID_FKEY
import lblcs.tables.PlayerGameFacts.PlayerGameFactsPath
import lblcs.tables.records.PlayerChampSelectsRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerChampSelects(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PlayerChampSelectsRecord>?,
    parentPath: InverseForeignKey<out Record, PlayerChampSelectsRecord>?,
    aliased: Table<PlayerChampSelectsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PlayerChampSelectsRecord>(
    alias,
    Dennys.DENNYS,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>dennys.player_champ_selects</code>
         */
        val PLAYER_CHAMP_SELECTS: PlayerChampSelects = PlayerChampSelects()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PlayerChampSelectsRecord> = PlayerChampSelectsRecord::class.java

    /**
     * The column <code>dennys.player_champ_selects.id</code>.
     */
    val ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>dennys.player_champ_selects.champion_name</code>.
     */
    val CHAMPION_NAME: TableField<PlayerChampSelectsRecord, String?> = createField(DSL.name("champion_name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.champion_id</code>.
     */
    val CHAMPION_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("champion_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.summoner1_id</code>.
     */
    val SUMMONER1_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("summoner1_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.summoner2_id</code>.
     */
    val SUMMONER2_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("summoner2_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.keystone_rune_id</code>.
     */
    val KEYSTONE_RUNE_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("keystone_rune_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.primary_rune1_id</code>.
     */
    val PRIMARY_RUNE1_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("primary_rune1_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.primary_rune2_id</code>.
     */
    val PRIMARY_RUNE2_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("primary_rune2_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.primary_rune3_id</code>.
     */
    val PRIMARY_RUNE3_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("primary_rune3_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.secondary_rune1_id</code>.
     */
    val SECONDARY_RUNE1_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("secondary_rune1_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.secondary_rune2_id</code>.
     */
    val SECONDARY_RUNE2_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("secondary_rune2_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.statshard1_id</code>.
     */
    val STATSHARD1_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("statshard1_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.statshard2_id</code>.
     */
    val STATSHARD2_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("statshard2_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_champ_selects.statshard3_id</code>.
     */
    val STATSHARD3_ID: TableField<PlayerChampSelectsRecord, Int?> = createField(DSL.name("statshard3_id"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<PlayerChampSelectsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PlayerChampSelectsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PlayerChampSelectsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>dennys.player_champ_selects</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>dennys.player_champ_selects</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>dennys.player_champ_selects</code> table reference
     */
    constructor(): this(DSL.name("player_champ_selects"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, PlayerChampSelectsRecord>?, parentPath: InverseForeignKey<out Record, PlayerChampSelectsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, PLAYER_CHAMP_SELECTS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class PlayerChampSelectsPath : PlayerChampSelects, Path<PlayerChampSelectsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, PlayerChampSelectsRecord>?, parentPath: InverseForeignKey<out Record, PlayerChampSelectsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<PlayerChampSelectsRecord>): super(alias, aliased)
        override fun `as`(alias: String): PlayerChampSelectsPath = PlayerChampSelectsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): PlayerChampSelectsPath = PlayerChampSelectsPath(alias, this)
        override fun `as`(alias: Table<*>): PlayerChampSelectsPath = PlayerChampSelectsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Dennys.DENNYS
    override fun getIdentity(): Identity<PlayerChampSelectsRecord, Int?> = super.getIdentity() as Identity<PlayerChampSelectsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PlayerChampSelectsRecord> = PLAYER_CHAMP_SELECTS_PKEY

    private lateinit var _playerGameFacts: PlayerGameFactsPath

    /**
     * Get the implicit to-many join path to the
     * <code>dennys.player_game_facts</code> table
     */
    fun playerGameFacts(): PlayerGameFactsPath {
        if (!this::_playerGameFacts.isInitialized)
            _playerGameFacts = PlayerGameFactsPath(this, null, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_CHAMP_SELECT_ID_FKEY.inverseKey)

        return _playerGameFacts;
    }

    val playerGameFacts: PlayerGameFactsPath
        get(): PlayerGameFactsPath = playerGameFacts()
    override fun `as`(alias: String): PlayerChampSelects = PlayerChampSelects(DSL.name(alias), this)
    override fun `as`(alias: Name): PlayerChampSelects = PlayerChampSelects(alias, this)
    override fun `as`(alias: Table<*>): PlayerChampSelects = PlayerChampSelects(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PlayerChampSelects = PlayerChampSelects(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PlayerChampSelects = PlayerChampSelects(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PlayerChampSelects = PlayerChampSelects(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PlayerChampSelects = PlayerChampSelects(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PlayerChampSelects = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PlayerChampSelects = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PlayerChampSelects = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PlayerChampSelects = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PlayerChampSelects = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PlayerChampSelects = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PlayerChampSelects = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PlayerChampSelects = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PlayerChampSelects = where(DSL.notExists(select))
}
