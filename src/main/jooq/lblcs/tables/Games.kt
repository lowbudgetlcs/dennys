/*
 * This file is generated by jOOQ.
 */
package lblcs.tables


import kotlin.collections.Collection
import kotlin.collections.List

import lblcs.Dennys
import lblcs.keys.GAMES_PKEY
import lblcs.keys.GAMES_RESULTS__GAMES_RESULTS_GAME_ID_FKEY
import lblcs.keys.GAMES__GAMES_BLUE_TEAM_FKEY
import lblcs.keys.GAMES__GAMES_RED_TEAM_FKEY
import lblcs.keys.GAMES__GAMES_SERIES_ID_FKEY
import lblcs.tables.GamesResults.GamesResultsPath
import lblcs.tables.Series.SeriesPath
import lblcs.tables.Teams.TeamsPath
import lblcs.tables.records.GamesRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Games(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, GamesRecord>?,
    parentPath: InverseForeignKey<out Record, GamesRecord>?,
    aliased: Table<GamesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<GamesRecord>(
    alias,
    Dennys.DENNYS,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>dennys.games</code>
         */
        val GAMES: Games = Games()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GamesRecord> = GamesRecord::class.java

    /**
     * The column <code>dennys.games.id</code>.
     */
    val ID: TableField<GamesRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>dennys.games.shortcode</code>.
     */
    val SHORTCODE: TableField<GamesRecord, String?> = createField(DSL.name("shortcode"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>dennys.games.blue_team</code>.
     */
    val BLUE_TEAM: TableField<GamesRecord, Int?> = createField(DSL.name("blue_team"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.games.red_team</code>.
     */
    val RED_TEAM: TableField<GamesRecord, Int?> = createField(DSL.name("red_team"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.games.series_id</code>.
     */
    val SERIES_ID: TableField<GamesRecord, Int?> = createField(DSL.name("series_id"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<GamesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<GamesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<GamesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>dennys.games</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>dennys.games</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>dennys.games</code> table reference
     */
    constructor(): this(DSL.name("games"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, GamesRecord>?, parentPath: InverseForeignKey<out Record, GamesRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, GAMES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class GamesPath : Games, Path<GamesRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, GamesRecord>?, parentPath: InverseForeignKey<out Record, GamesRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<GamesRecord>): super(alias, aliased)
        override fun `as`(alias: String): GamesPath = GamesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): GamesPath = GamesPath(alias, this)
        override fun `as`(alias: Table<*>): GamesPath = GamesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Dennys.DENNYS
    override fun getIdentity(): Identity<GamesRecord, Int?> = super.getIdentity() as Identity<GamesRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<GamesRecord> = GAMES_PKEY
    override fun getReferences(): List<ForeignKey<GamesRecord, *>> = listOf(GAMES__GAMES_BLUE_TEAM_FKEY, GAMES__GAMES_RED_TEAM_FKEY, GAMES__GAMES_SERIES_ID_FKEY)

    private lateinit var _gamesBlueTeamFkey: TeamsPath

    /**
     * Get the implicit join path to the <code>dennys.teams</code> table, via
     * the <code>games_blue_team_fkey</code> key.
     */
    fun gamesBlueTeamFkey(): TeamsPath {
        if (!this::_gamesBlueTeamFkey.isInitialized)
            _gamesBlueTeamFkey = TeamsPath(this, GAMES__GAMES_BLUE_TEAM_FKEY, null)

        return _gamesBlueTeamFkey;
    }

    val gamesBlueTeamFkey: TeamsPath
        get(): TeamsPath = gamesBlueTeamFkey()

    private lateinit var _gamesRedTeamFkey: TeamsPath

    /**
     * Get the implicit join path to the <code>dennys.teams</code> table, via
     * the <code>games_red_team_fkey</code> key.
     */
    fun gamesRedTeamFkey(): TeamsPath {
        if (!this::_gamesRedTeamFkey.isInitialized)
            _gamesRedTeamFkey = TeamsPath(this, GAMES__GAMES_RED_TEAM_FKEY, null)

        return _gamesRedTeamFkey;
    }

    val gamesRedTeamFkey: TeamsPath
        get(): TeamsPath = gamesRedTeamFkey()

    private lateinit var _series: SeriesPath

    /**
     * Get the implicit join path to the <code>dennys.series</code> table.
     */
    fun series(): SeriesPath {
        if (!this::_series.isInitialized)
            _series = SeriesPath(this, GAMES__GAMES_SERIES_ID_FKEY, null)

        return _series;
    }

    val series: SeriesPath
        get(): SeriesPath = series()

    private lateinit var _gamesResults: GamesResultsPath

    /**
     * Get the implicit to-many join path to the
     * <code>dennys.games_results</code> table
     */
    fun gamesResults(): GamesResultsPath {
        if (!this::_gamesResults.isInitialized)
            _gamesResults = GamesResultsPath(this, null, GAMES_RESULTS__GAMES_RESULTS_GAME_ID_FKEY.inverseKey)

        return _gamesResults;
    }

    val gamesResults: GamesResultsPath
        get(): GamesResultsPath = gamesResults()
    override fun `as`(alias: String): Games = Games(DSL.name(alias), this)
    override fun `as`(alias: Name): Games = Games(alias, this)
    override fun `as`(alias: Table<*>): Games = Games(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Games = Games(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Games = Games(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Games = Games(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Games = Games(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Games = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Games = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Games = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Games = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Games = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Games = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Games = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Games = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Games = where(DSL.notExists(select))
}
