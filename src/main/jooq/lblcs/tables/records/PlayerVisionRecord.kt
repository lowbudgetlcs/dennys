/*
 * This file is generated by jOOQ.
 */
package lblcs.tables.records


import lblcs.tables.PlayerVision

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerVisionRecord() : UpdatableRecordImpl<PlayerVisionRecord>(PlayerVision.PLAYER_VISION) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var visionScore: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var pinksPurchased: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var pinksPlaced: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var wardsPlaced: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var wardsDestroyed: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised PlayerVisionRecord
     */
    constructor(id: Int? = null, visionScore: Int? = null, pinksPurchased: Int? = null, pinksPlaced: Int? = null, wardsPlaced: Int? = null, wardsDestroyed: Int? = null): this() {
        this.id = id
        this.visionScore = visionScore
        this.pinksPurchased = pinksPurchased
        this.pinksPlaced = pinksPlaced
        this.wardsPlaced = wardsPlaced
        this.wardsDestroyed = wardsDestroyed
        resetChangedOnNotNull()
    }
}
