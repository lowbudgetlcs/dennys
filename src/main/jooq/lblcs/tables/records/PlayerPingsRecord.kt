/*
 * This file is generated by jOOQ.
 */
package lblcs.tables.records


import lblcs.tables.PlayerPings

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerPingsRecord() : UpdatableRecordImpl<PlayerPingsRecord>(PlayerPings.PLAYER_PINGS) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var onMyWayCount: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var enemyMissingCount: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var assistMeCount: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var getBackCount: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var enemyVisionCount: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open var allInCount: Int?
        set(value): Unit = set(6, value)
        get(): Int? = get(6) as Int?

    open var needVisionCount: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    open var pushCount: Int?
        set(value): Unit = set(8, value)
        get(): Int? = get(8) as Int?

    open var visionClearedCount: Int?
        set(value): Unit = set(9, value)
        get(): Int? = get(9) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised PlayerPingsRecord
     */
    constructor(id: Int? = null, onMyWayCount: Int? = null, enemyMissingCount: Int? = null, assistMeCount: Int? = null, getBackCount: Int? = null, enemyVisionCount: Int? = null, allInCount: Int? = null, needVisionCount: Int? = null, pushCount: Int? = null, visionClearedCount: Int? = null): this() {
        this.id = id
        this.onMyWayCount = onMyWayCount
        this.enemyMissingCount = enemyMissingCount
        this.assistMeCount = assistMeCount
        this.getBackCount = getBackCount
        this.enemyVisionCount = enemyVisionCount
        this.allInCount = allInCount
        this.needVisionCount = needVisionCount
        this.pushCount = pushCount
        this.visionClearedCount = visionClearedCount
        resetChangedOnNotNull()
    }
}
