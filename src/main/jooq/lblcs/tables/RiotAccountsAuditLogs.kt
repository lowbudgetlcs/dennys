/*
 * This file is generated by jOOQ.
 */
package lblcs.tables


import java.time.OffsetDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import lblcs.Dennys
import lblcs.keys.RIOT_ACCOUNTS_AUDIT_LOGS_PKEY
import lblcs.keys.RIOT_ACCOUNTS_AUDIT_LOGS__RIOT_ACCOUNTS_AUDIT_LOGS_RIOT_ACCOUNT_ID_FKEY
import lblcs.tables.RiotAccounts.RiotAccountsPath
import lblcs.tables.records.RiotAccountsAuditLogsRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RiotAccountsAuditLogs(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, RiotAccountsAuditLogsRecord>?,
    parentPath: InverseForeignKey<out Record, RiotAccountsAuditLogsRecord>?,
    aliased: Table<RiotAccountsAuditLogsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<RiotAccountsAuditLogsRecord>(
    alias,
    Dennys.DENNYS,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>dennys.riot_accounts_audit_logs</code>
         */
        val RIOT_ACCOUNTS_AUDIT_LOGS: RiotAccountsAuditLogs = RiotAccountsAuditLogs()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RiotAccountsAuditLogsRecord> = RiotAccountsAuditLogsRecord::class.java

    /**
     * The column <code>dennys.riot_accounts_audit_logs.id</code>.
     */
    val ID: TableField<RiotAccountsAuditLogsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>dennys.riot_accounts_audit_logs.created_at</code>.
     */
    val CREATED_AT: TableField<RiotAccountsAuditLogsRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>dennys.riot_accounts_audit_logs.riot_account_id</code>.
     */
    val RIOT_ACCOUNT_ID: TableField<RiotAccountsAuditLogsRecord, Int?> = createField(DSL.name("riot_account_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.riot_accounts_audit_logs.action</code>.
     */
    val ACTION: TableField<RiotAccountsAuditLogsRecord, String?> = createField(DSL.name("action"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>dennys.riot_accounts_audit_logs.message</code>.
     */
    val MESSAGE: TableField<RiotAccountsAuditLogsRecord, String?> = createField(DSL.name("message"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>dennys.riot_accounts_audit_logs.origin</code>.
     */
    val ORIGIN: TableField<RiotAccountsAuditLogsRecord, String?> = createField(DSL.name("origin"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<RiotAccountsAuditLogsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<RiotAccountsAuditLogsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<RiotAccountsAuditLogsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>dennys.riot_accounts_audit_logs</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>dennys.riot_accounts_audit_logs</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>dennys.riot_accounts_audit_logs</code> table reference
     */
    constructor(): this(DSL.name("riot_accounts_audit_logs"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, RiotAccountsAuditLogsRecord>?, parentPath: InverseForeignKey<out Record, RiotAccountsAuditLogsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, RIOT_ACCOUNTS_AUDIT_LOGS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class RiotAccountsAuditLogsPath : RiotAccountsAuditLogs, Path<RiotAccountsAuditLogsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, RiotAccountsAuditLogsRecord>?, parentPath: InverseForeignKey<out Record, RiotAccountsAuditLogsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<RiotAccountsAuditLogsRecord>): super(alias, aliased)
        override fun `as`(alias: String): RiotAccountsAuditLogsPath = RiotAccountsAuditLogsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): RiotAccountsAuditLogsPath = RiotAccountsAuditLogsPath(alias, this)
        override fun `as`(alias: Table<*>): RiotAccountsAuditLogsPath = RiotAccountsAuditLogsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Dennys.DENNYS
    override fun getIdentity(): Identity<RiotAccountsAuditLogsRecord, Int?> = super.getIdentity() as Identity<RiotAccountsAuditLogsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<RiotAccountsAuditLogsRecord> = RIOT_ACCOUNTS_AUDIT_LOGS_PKEY
    override fun getReferences(): List<ForeignKey<RiotAccountsAuditLogsRecord, *>> = listOf(RIOT_ACCOUNTS_AUDIT_LOGS__RIOT_ACCOUNTS_AUDIT_LOGS_RIOT_ACCOUNT_ID_FKEY)

    private lateinit var _riotAccounts: RiotAccountsPath

    /**
     * Get the implicit join path to the <code>dennys.riot_accounts</code>
     * table.
     */
    fun riotAccounts(): RiotAccountsPath {
        if (!this::_riotAccounts.isInitialized)
            _riotAccounts = RiotAccountsPath(this, RIOT_ACCOUNTS_AUDIT_LOGS__RIOT_ACCOUNTS_AUDIT_LOGS_RIOT_ACCOUNT_ID_FKEY, null)

        return _riotAccounts;
    }

    val riotAccounts: RiotAccountsPath
        get(): RiotAccountsPath = riotAccounts()
    override fun `as`(alias: String): RiotAccountsAuditLogs = RiotAccountsAuditLogs(DSL.name(alias), this)
    override fun `as`(alias: Name): RiotAccountsAuditLogs = RiotAccountsAuditLogs(alias, this)
    override fun `as`(alias: Table<*>): RiotAccountsAuditLogs = RiotAccountsAuditLogs(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): RiotAccountsAuditLogs = RiotAccountsAuditLogs(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RiotAccountsAuditLogs = RiotAccountsAuditLogs(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): RiotAccountsAuditLogs = RiotAccountsAuditLogs(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): RiotAccountsAuditLogs = RiotAccountsAuditLogs(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): RiotAccountsAuditLogs = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): RiotAccountsAuditLogs = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): RiotAccountsAuditLogs = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): RiotAccountsAuditLogs = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): RiotAccountsAuditLogs = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): RiotAccountsAuditLogs = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): RiotAccountsAuditLogs = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): RiotAccountsAuditLogs = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): RiotAccountsAuditLogs = where(DSL.notExists(select))
}
