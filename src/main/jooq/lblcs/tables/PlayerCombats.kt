/*
 * This file is generated by jOOQ.
 */
package lblcs.tables


import kotlin.collections.Collection

import lblcs.Dennys
import lblcs.keys.PLAYER_COMBATS_PKEY
import lblcs.keys.PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_COMBATS_ID_FKEY
import lblcs.tables.PlayerGameFacts.PlayerGameFactsPath
import lblcs.tables.records.PlayerCombatsRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerCombats(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PlayerCombatsRecord>?,
    parentPath: InverseForeignKey<out Record, PlayerCombatsRecord>?,
    aliased: Table<PlayerCombatsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PlayerCombatsRecord>(
    alias,
    Dennys.DENNYS,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>dennys.player_combats</code>
         */
        val PLAYER_COMBATS: PlayerCombats = PlayerCombats()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PlayerCombatsRecord> = PlayerCombatsRecord::class.java

    /**
     * The column <code>dennys.player_combats.id</code>.
     */
    val ID: TableField<PlayerCombatsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>dennys.player_combats.kills</code>.
     */
    val KILLS: TableField<PlayerCombatsRecord, Int?> = createField(DSL.name("kills"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_combats.deaths</code>.
     */
    val DEATHS: TableField<PlayerCombatsRecord, Int?> = createField(DSL.name("deaths"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_combats.assists</code>.
     */
    val ASSISTS: TableField<PlayerCombatsRecord, Int?> = createField(DSL.name("assists"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_combats.damage_to_champs</code>.
     */
    val DAMAGE_TO_CHAMPS: TableField<PlayerCombatsRecord, Int?> = createField(DSL.name("damage_to_champs"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_combats.healing_on_allies</code>.
     */
    val HEALING_ON_ALLIES: TableField<PlayerCombatsRecord, Int?> = createField(DSL.name("healing_on_allies"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_combats.damage_taken_from_champs</code>.
     */
    val DAMAGE_TAKEN_FROM_CHAMPS: TableField<PlayerCombatsRecord, Int?> = createField(DSL.name("damage_taken_from_champs"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>dennys.player_combats.team_kills</code>.
     */
    val TEAM_KILLS: TableField<PlayerCombatsRecord, Int?> = createField(DSL.name("team_kills"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<PlayerCombatsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PlayerCombatsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PlayerCombatsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>dennys.player_combats</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>dennys.player_combats</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>dennys.player_combats</code> table reference
     */
    constructor(): this(DSL.name("player_combats"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, PlayerCombatsRecord>?, parentPath: InverseForeignKey<out Record, PlayerCombatsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, PLAYER_COMBATS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class PlayerCombatsPath : PlayerCombats, Path<PlayerCombatsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, PlayerCombatsRecord>?, parentPath: InverseForeignKey<out Record, PlayerCombatsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<PlayerCombatsRecord>): super(alias, aliased)
        override fun `as`(alias: String): PlayerCombatsPath = PlayerCombatsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): PlayerCombatsPath = PlayerCombatsPath(alias, this)
        override fun `as`(alias: Table<*>): PlayerCombatsPath = PlayerCombatsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Dennys.DENNYS
    override fun getIdentity(): Identity<PlayerCombatsRecord, Int?> = super.getIdentity() as Identity<PlayerCombatsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PlayerCombatsRecord> = PLAYER_COMBATS_PKEY

    private lateinit var _playerGameFacts: PlayerGameFactsPath

    /**
     * Get the implicit to-many join path to the
     * <code>dennys.player_game_facts</code> table
     */
    fun playerGameFacts(): PlayerGameFactsPath {
        if (!this::_playerGameFacts.isInitialized)
            _playerGameFacts = PlayerGameFactsPath(this, null, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_COMBATS_ID_FKEY.inverseKey)

        return _playerGameFacts;
    }

    val playerGameFacts: PlayerGameFactsPath
        get(): PlayerGameFactsPath = playerGameFacts()
    override fun `as`(alias: String): PlayerCombats = PlayerCombats(DSL.name(alias), this)
    override fun `as`(alias: Name): PlayerCombats = PlayerCombats(alias, this)
    override fun `as`(alias: Table<*>): PlayerCombats = PlayerCombats(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PlayerCombats = PlayerCombats(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PlayerCombats = PlayerCombats(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PlayerCombats = PlayerCombats(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PlayerCombats = PlayerCombats(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PlayerCombats = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PlayerCombats = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PlayerCombats = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PlayerCombats = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PlayerCombats = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PlayerCombats = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PlayerCombats = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PlayerCombats = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PlayerCombats = where(DSL.notExists(select))
}
