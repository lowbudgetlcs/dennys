/*
 * This file is generated by jOOQ.
 */
package lblcs.tables


import kotlin.collections.Collection
import kotlin.collections.List

import lblcs.Dennys
import lblcs.enums.LolSide
import lblcs.keys.PLAYER_GAME_FACTS_PKEY
import lblcs.keys.PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_CHAMP_SELECT_ID_FKEY
import lblcs.keys.PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_COMBATS_ID_FKEY
import lblcs.keys.PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_FARMING_ID_FKEY
import lblcs.keys.PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_INVENTORIES_ID_FKEY
import lblcs.keys.PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_PINGS_ID_FKEY
import lblcs.keys.PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_VISION_ID_FKEY
import lblcs.keys.PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_RIOT_ACCOUNT_ID_FKEY
import lblcs.tables.PlayerChampSelects.PlayerChampSelectsPath
import lblcs.tables.PlayerCombats.PlayerCombatsPath
import lblcs.tables.PlayerFarming.PlayerFarmingPath
import lblcs.tables.PlayerInventories.PlayerInventoriesPath
import lblcs.tables.PlayerPings.PlayerPingsPath
import lblcs.tables.PlayerVision.PlayerVisionPath
import lblcs.tables.RiotAccounts.RiotAccountsPath
import lblcs.tables.records.PlayerGameFactsRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerGameFacts(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PlayerGameFactsRecord>?,
    parentPath: InverseForeignKey<out Record, PlayerGameFactsRecord>?,
    aliased: Table<PlayerGameFactsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PlayerGameFactsRecord>(
    alias,
    Dennys.DENNYS,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>dennys.player_game_facts</code>
         */
        val PLAYER_GAME_FACTS: PlayerGameFacts = PlayerGameFacts()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PlayerGameFactsRecord> = PlayerGameFactsRecord::class.java

    /**
     * The column <code>dennys.player_game_facts.id</code>.
     */
    val ID: TableField<PlayerGameFactsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>dennys.player_game_facts.riot_account_id</code>.
     */
    val RIOT_ACCOUNT_ID: TableField<PlayerGameFactsRecord, Int?> = createField(DSL.name("riot_account_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.player_game_facts.side</code>.
     */
    val SIDE: TableField<PlayerGameFactsRecord, LolSide?> = createField(DSL.name("side"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(LolSide::class.java), this, "")

    /**
     * The column <code>dennys.player_game_facts.shortcode</code>.
     */
    val SHORTCODE: TableField<PlayerGameFactsRecord, String?> = createField(DSL.name("shortcode"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>dennys.player_game_facts.player_champ_select_id</code>.
     */
    val PLAYER_CHAMP_SELECT_ID: TableField<PlayerGameFactsRecord, Int?> = createField(DSL.name("player_champ_select_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.player_game_facts.player_inventories_id</code>.
     */
    val PLAYER_INVENTORIES_ID: TableField<PlayerGameFactsRecord, Int?> = createField(DSL.name("player_inventories_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.player_game_facts.player_combats_id</code>.
     */
    val PLAYER_COMBATS_ID: TableField<PlayerGameFactsRecord, Int?> = createField(DSL.name("player_combats_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.player_game_facts.player_vision_id</code>.
     */
    val PLAYER_VISION_ID: TableField<PlayerGameFactsRecord, Int?> = createField(DSL.name("player_vision_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.player_game_facts.player_pings_id</code>.
     */
    val PLAYER_PINGS_ID: TableField<PlayerGameFactsRecord, Int?> = createField(DSL.name("player_pings_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>dennys.player_game_facts.player_farming_id</code>.
     */
    val PLAYER_FARMING_ID: TableField<PlayerGameFactsRecord, Int?> = createField(DSL.name("player_farming_id"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<PlayerGameFactsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PlayerGameFactsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PlayerGameFactsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>dennys.player_game_facts</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>dennys.player_game_facts</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>dennys.player_game_facts</code> table reference
     */
    constructor(): this(DSL.name("player_game_facts"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, PlayerGameFactsRecord>?, parentPath: InverseForeignKey<out Record, PlayerGameFactsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, PLAYER_GAME_FACTS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class PlayerGameFactsPath : PlayerGameFacts, Path<PlayerGameFactsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, PlayerGameFactsRecord>?, parentPath: InverseForeignKey<out Record, PlayerGameFactsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<PlayerGameFactsRecord>): super(alias, aliased)
        override fun `as`(alias: String): PlayerGameFactsPath = PlayerGameFactsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): PlayerGameFactsPath = PlayerGameFactsPath(alias, this)
        override fun `as`(alias: Table<*>): PlayerGameFactsPath = PlayerGameFactsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Dennys.DENNYS
    override fun getIdentity(): Identity<PlayerGameFactsRecord, Int?> = super.getIdentity() as Identity<PlayerGameFactsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PlayerGameFactsRecord> = PLAYER_GAME_FACTS_PKEY
    override fun getReferences(): List<ForeignKey<PlayerGameFactsRecord, *>> = listOf(PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_RIOT_ACCOUNT_ID_FKEY, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_CHAMP_SELECT_ID_FKEY, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_INVENTORIES_ID_FKEY, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_COMBATS_ID_FKEY, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_VISION_ID_FKEY, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_PINGS_ID_FKEY, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_FARMING_ID_FKEY)

    private lateinit var _riotAccounts: RiotAccountsPath

    /**
     * Get the implicit join path to the <code>dennys.riot_accounts</code>
     * table.
     */
    fun riotAccounts(): RiotAccountsPath {
        if (!this::_riotAccounts.isInitialized)
            _riotAccounts = RiotAccountsPath(this, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_RIOT_ACCOUNT_ID_FKEY, null)

        return _riotAccounts;
    }

    val riotAccounts: RiotAccountsPath
        get(): RiotAccountsPath = riotAccounts()

    private lateinit var _playerChampSelects: PlayerChampSelectsPath

    /**
     * Get the implicit join path to the
     * <code>dennys.player_champ_selects</code> table.
     */
    fun playerChampSelects(): PlayerChampSelectsPath {
        if (!this::_playerChampSelects.isInitialized)
            _playerChampSelects = PlayerChampSelectsPath(this, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_CHAMP_SELECT_ID_FKEY, null)

        return _playerChampSelects;
    }

    val playerChampSelects: PlayerChampSelectsPath
        get(): PlayerChampSelectsPath = playerChampSelects()

    private lateinit var _playerInventories: PlayerInventoriesPath

    /**
     * Get the implicit join path to the <code>dennys.player_inventories</code>
     * table.
     */
    fun playerInventories(): PlayerInventoriesPath {
        if (!this::_playerInventories.isInitialized)
            _playerInventories = PlayerInventoriesPath(this, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_INVENTORIES_ID_FKEY, null)

        return _playerInventories;
    }

    val playerInventories: PlayerInventoriesPath
        get(): PlayerInventoriesPath = playerInventories()

    private lateinit var _playerCombats: PlayerCombatsPath

    /**
     * Get the implicit join path to the <code>dennys.player_combats</code>
     * table.
     */
    fun playerCombats(): PlayerCombatsPath {
        if (!this::_playerCombats.isInitialized)
            _playerCombats = PlayerCombatsPath(this, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_COMBATS_ID_FKEY, null)

        return _playerCombats;
    }

    val playerCombats: PlayerCombatsPath
        get(): PlayerCombatsPath = playerCombats()

    private lateinit var _playerVision: PlayerVisionPath

    /**
     * Get the implicit join path to the <code>dennys.player_vision</code>
     * table.
     */
    fun playerVision(): PlayerVisionPath {
        if (!this::_playerVision.isInitialized)
            _playerVision = PlayerVisionPath(this, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_VISION_ID_FKEY, null)

        return _playerVision;
    }

    val playerVision: PlayerVisionPath
        get(): PlayerVisionPath = playerVision()

    private lateinit var _playerPings: PlayerPingsPath

    /**
     * Get the implicit join path to the <code>dennys.player_pings</code> table.
     */
    fun playerPings(): PlayerPingsPath {
        if (!this::_playerPings.isInitialized)
            _playerPings = PlayerPingsPath(this, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_PINGS_ID_FKEY, null)

        return _playerPings;
    }

    val playerPings: PlayerPingsPath
        get(): PlayerPingsPath = playerPings()

    private lateinit var _playerFarming: PlayerFarmingPath

    /**
     * Get the implicit join path to the <code>dennys.player_farming</code>
     * table.
     */
    fun playerFarming(): PlayerFarmingPath {
        if (!this::_playerFarming.isInitialized)
            _playerFarming = PlayerFarmingPath(this, PLAYER_GAME_FACTS__PLAYER_GAME_FACTS_PLAYER_FARMING_ID_FKEY, null)

        return _playerFarming;
    }

    val playerFarming: PlayerFarmingPath
        get(): PlayerFarmingPath = playerFarming()
    override fun `as`(alias: String): PlayerGameFacts = PlayerGameFacts(DSL.name(alias), this)
    override fun `as`(alias: Name): PlayerGameFacts = PlayerGameFacts(alias, this)
    override fun `as`(alias: Table<*>): PlayerGameFacts = PlayerGameFacts(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PlayerGameFacts = PlayerGameFacts(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PlayerGameFacts = PlayerGameFacts(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PlayerGameFacts = PlayerGameFacts(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PlayerGameFacts = PlayerGameFacts(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PlayerGameFacts = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PlayerGameFacts = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PlayerGameFacts = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PlayerGameFacts = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PlayerGameFacts = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PlayerGameFacts = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PlayerGameFacts = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PlayerGameFacts = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PlayerGameFacts = where(DSL.notExists(select))
}
